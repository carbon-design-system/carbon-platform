{"expireTime":1683982757613,"key":"https://medium.com/feed/carbondesign","val":{"items":[{"creator":"Shixie","title":"The power to serve","link":"https://medium.com/carbondesign/the-power-to-serve-fb84387deef8?source=rss----105693e8ddba---4","pubDate":"Tue, 26 Apr 2022 15:04:07 GMT","content:encoded":"<h4>Lessons learned on design system team operation and workflows</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lv4yUmmwrpYm_kN64X69kQ.png\" /><figcaption><em>For a system to be adopted at scale, the design system team has to operate like a service, where backstage activities are coordinated and choreographed to enable a desired onstage experience.</em></figcaption></figure><p>In February 2021, I was fortunate to join the leadership team as the Design Lead of <a href=\"https://www.ibm.com/standards/carbon/\">Carbon for IBM.com design system</a>. While our goals are connected to consistency and brand expression, our success as a team has far exceeded those categories. We have successfully refined our team’s operation and workflows, delivering seven-fold growth in adoption within ten months. It took me some time to digest this tremendous experience. Here are my reflections on what might have worked and why.</p><h4>Some context about the Carbon for IBM.com design system</h4><p>Our design system supports specifically the needs of IBM.com, IBM’s corporate website with over 20 million pages built on two legacy design systems, with hundreds to thousands of globally distributed owners.</p><p><a href=\"https://www.ibm.com/standards/carbon/\">Carbon for IBM.com</a></p><p>Our team’s objectives and challenges are shared by many design system teams. We want to encourage teams adopting the system to reuse as much as possible, but these teams often face aggressive timelines and are tempted by customization and quick hacks. There is a healthy amount of executive pressure on us to not become a bottleneck to others, and to continue to drive consistency and beautiful brand expression in what hits the glass.</p><p>We had to aim for the success of all parties : the adopters of the system need to ship; the stakeholders need results, and the system team needs a healthy pace to run the distance. A design system is a large investment — a bet on efficiency through reuse.</p><p><strong>Creating the system is only half the battle. Sustainable operation, successful adoption, and observable value return are my focus today.</strong></p><h3>Lesson 1: a project, a product, a service</h3><p>Most would acknowledge today that a design system is not a one time project, but a product or a program that requires ongoing maintenance. These labels don’t highlight the importance of design system adoption efforts. For a system to be adopted at scale, the design system team has to operate like a service provider.</p><p>Let’s start with self-service, which should have required minimum attention from the design system team. The Carbon for IBM.com design system is open-source so we have a <a href=\"https://github.com/carbon-design-system/carbon-for-ibm-dotcom/\">public GitHub repository</a>, and we maintain a public website for usage documentation. Our sprint plans and work-in-progress designs are available on ZenHub and Box, so all IBMers can view. These decisions provide transparency and enable a large number of adopters to self-serve on getting status updates on their requests. However, those familiar with <a href=\"http://www.practicalservicedesign.com/service-design-101\">Service Design</a> would be quick to point out these are only a <em>surface experience</em>, and a lot of backstage work is needed to achieve it. In order to arrive at a delightful and seamless service delivery, an end-to-end, surface-to-core perspective has to be applied to the operation. Otherwise, GitHub issues can be out of date, and Box can be a labyrinth of nested folders, and the purpose of self-service through transparency would be lost.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Unqbr57tzwbpkGbkF25tdw.png\" /><figcaption>Example of publicly available project status information and usage documentation</figcaption></figure><p>To make sure we are on top of every touch point with our adopters, we formed a “fire line” support team, which is a roster of one designer and one developer assigned for the sprint to watch our Slack and GitHub activities. These are our “first responders” and can close out a good portion of the inquiries by leveraging their own knowledge and connections. When we realized increased adoption created more implementation questions, we added one more developer to the fire line to increase response time and make the workload more manageable.</p><p>The Carbon for IBM.com leadership team meets twice a week to triage new issues in GitHub. We use a collaboration method internally referred to as the “four-in-the-box” model, where design lead, development lead, product owner, and project manager get together, and align on decisions, next steps, scheduling, and move the issues down the pipeline. This method helps us closely monitor and respond to the touch points with the adopters, so that the surface experience is an efficient and reliable one. To keep these meetings efficient, fire-line designers and developers fill in any “blanks” that may have come up during triage.</p><h4>Troubleshooting for adopters</h4><p>Aside from GitHub, we have other channels of connection with adopters, including <strong>weekly office hours</strong>. Office hours are hosted by the design system team and open to anyone in IBM interested in the design system. IBMers are invited to come with questions, work in progress, blockers, or anything. In some parts of IBM, there’s often only one designer on the team, and they can come to us during this weekly time slot for design feedback, grow their skills, and join a virtual design community.</p><p>We’ve created <strong>Away Missions</strong> where a Carbon for IBM.com team member joins an adopter team on a short-term engagement project. This has been especially fruitful in activating adopter teams’ developers in learning to use the system. For high-priority adopters, such as the Adobe Experience Manager team in charge of creating page templates, the leadership team has bi-weekly or monthly check-ins to see if they are on track with their adoption and address any blockers.</p><p>These benefit our work in a lot of ways. Beyond facilitating the product teams’ adoption progress and building up a good relationship, we also became frequent witnesses to serendipitous encounters. A frequent occurrence in our office hours is when team X comes with an ask, and we can show them that team Y already has a similar request in the pipeline, and it often fits their needs.</p><p>I observed how these strategies made every team member more aware of our role in the bigger picture — to <em>serve</em> our adopter teams so <em>they</em> can succeed. The design system teams connect the dots between product teams, create alignments, and boost efficiency while playing a supporting role. Our role in governance comes second. When pushback on requests are needed, for example when the request conflicts with IBM’s design and content standards, it is done through the leadership team, with clear documentation. In the end, the win for us is that the system got adopted, the components got reused, and IBM’s public digital storefront got a little bit tidier.</p><h3>Lesson 2: prioritization, process, and pace</h3><p>The more services we offer, the more others depend on us. This can go to a dangerous extreme. The design system team members have to take care of themselves and make sure we don’t drown in meetings. This quickly became my number one concern after I joined the team — after all, we still have a whole library to build and maintain. The design system team members’ day-to-day lives should not be always at the mercy of adopter teams’ deadlines and their executives.</p><p>Prioritization is a must. Understanding how a request relates to the current business focus is essential, and there are many<a href=\"https://www.nngroup.com/articles/prioritization-methods/\"> helpful prioritization methods</a> out there. However the bigger challenge, in our experience, is putting a time frame on this prioritized backlog so it is not all for “some time in the indefinite future.” An estimated delivery date is a basic requirement for good service.</p><p>We found that leaning into a transparent and robust process of working helps to create this estimated time frame, and make our adopter teams understand some very important things:</p><ol><li>Things take time. We are not miracle workers.</li><li>Our quality is high because we never skip important steps such as QA.</li><li>They can help too!</li></ol><p>With these understandings in place, we can delay or push back on requests we are unable to fulfill without alienating adopters, expand our capacity by encouraging contribution, and really pace ourselves for the long run.</p><p>Below is a high-level overview of our workflow. Steps colored magenta are work primarily handled by designers; blue steps are handled by developers, and black-colored steps are handled by the leadership team. (<em>You can find detailed step descriptions in the Appendix</em>.)</p><p>Depending on the type and scope of work, only some of these steps might be needed:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iRMSuGNf2LA1mVwokyROPg.png\" /><figcaption><em>A bug might only take us four steps to close it out. A typical feature request engages the whole team, but some design and dev work can happen concurrently.</em></figcaption></figure><p>The best part is external teams contributing! Below is an example of when we partnered with the AEM template team on some of their feature requests. We were able to let go of the wheel and play an advisory role, allowing the whole ship to sail faster:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SG8TI6-N5Stjk6_PcgT80g.png\" /><figcaption>We encourage both design and code contributions</figcaption></figure><p>The workflow feels hypothetical until it becomes part of a release schedule. Keeping in mind that the goal is to arrive at a transparent and robust process ensures success for all parties, so a timeline is really helpful.</p><p>Here’s how we arrived at a timeline with some important dates to observe:</p><p>We practice the standard two-week sprint. Below is the calendar for our version 1.20 to 1.22 releases. We quickened the release pace by one week so our adopters can get the changes faster.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*laksvdpXm1qcs91OMSO9lg.png\" /><figcaption><em>Calendar for our v1.20 to v1.22 releases, where release date is in dark blue, and code freeze lasts for a week</em>.</figcaption></figure><p>Too often, release cycles are discussed as a developer-only activity. This is false, and unhealthy. This schedule has significant impact on a design team’s workload and pace, so here are the additional relevant dates when designers’ work are taken into consideration:</p><ol><li><strong>Design and specs freeze</strong> is three weeks before the next code freeze<strong>. </strong>It’s pencil down time. This gives the dev team a reasonable amount of time to implement by code freeze.</li><li><strong>Pull request submission date </strong>has to be at least three days before code freeze to allow time for the design team to do design QA. Designers can block a merge if the implementation is below standard from a design perspective. Thanks to<a href=\"https://www.browserstack.com/percy\"> Browserstack Percy</a>, visual review has become very straightforward. Conscientious developers can even run and check Percy results before submitting the PR to reduce design QA cycles.</li></ol><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UYZ22OwhNLDk4KYUOhL5LA.png\" /><figcaption><em>Dates that requires design attention — in addition to code freeze — are PR submission date and design and spec freeze date</em></figcaption></figure><p>Putting the release cycle together with the workflows, it becomes easy to see whether expecting a feature request by a particular date is realistic, or to plan ahead by backtracking the days to give time for every necessary step. Below are a few hypothetical examples; in reality, one can expect a bit more gaps between the steps as the individual is often handling more than one request or bug per release.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9CmzzHIcSGWyRqBW4NcgVw.png\" /><figcaption><em>Hypothetical example timelines. In reality, one can expect a bit more gaps between the steps as the individual is often handling more than one request or bug per release.</em></figcaption></figure><p>The team is constantly looking at possible ways to be more efficient. Our testing period, for example, has already become much shorter since last year thanks to automation. For more, check out <a href=\"https://medium.com/carbondesign/automating-a-design-system-69bd2414f75\">Automating a design system</a> from our Development Lead and Architect <a href=\"https://medium.com/u/18e8f1b7f20a\">Jeff Chew</a>.</p><h3>Lesson 3: observable value return</h3><p>Pick a key performance index (KPI) that resonates with executives, but be mindful of the inevitable limitation of simplifying a complex reality into a single number.</p><p>For Carbon for IBM.com, our KPI is the amount of <strong>pageviews</strong>. We track the page view of pages built with Carbon vs the pages built with legacy design systems to see the amount of adoption. Pageviews as a metric is more accurate to measure adoption than the more straightforward number of pages. IBM.com has over 20 million pages, but a small portion of the pages garner over 80% of the total traffic. Pageviews’ direct connection with traffic makes our impact clear and observable.</p><p>We started the year with 6.2% of all pageviews attributed to pages built with Carbon. By the end of November that same year, 44.8% of page views of all pages on IBM.com were attributed to us. Meanwhile, the page views attributed to the deprecated design system Northstar has been steadily reducing from 54% to 21%, suggesting the increase in page views we got is not just from new pages, but also because page owners are successfully migrating their pages over.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QzU3fsVCKIIBqldsMfvVxA.png\" /><figcaption><em>Bar chart showing the change in pageviews of Carbon built pages between February and November</em></figcaption></figure><p>This result carries some caveats. Instrumentation has limitations. It’s easy for the tool to decide whether a page is using Carbon for IBM.com as a dependency, but hard for it to know how much — nevermind how well — the page is using the system. It is very likely a page out there is getting counted but is only using one of our components, or worse, has broken every usage rule. It’s hard to deny the necessity of a KPI, but hopefully we will all become a little bit wiser if we keep up a healthy habit to scrutinize every number.</p><h3>Closing thoughts</h3><p>Yesterday, I came across the Sales organization’s upbeat monthly letter, filled with actions and demands: “Make the move! Close the deal!” And I was instantly thankful that, being on a design system team, we don’t have to “win,” generate revenue, or beat out competition — at least not directly.</p><p>Although we had to prove our impact in other ways, we are here to serve. It is only one website we have influence over! But this thought relaxed my nerves. There’s power in thinking that if we do our work right, we can make everyone a winner.</p><h4>Meet the team</h4><p>The above practices, workflow, and metrics were very much in place before I joined the team, and credit goes to the present and past leads who created them and matured them over time: <a href=\"https://www.linkedin.com/in/ljcarotenuto/\">Linda Carotenuto</a>, <a href=\"https://medium.com/u/18e8f1b7f20a\">Jeff Chew</a>, and <a href=\"https://medium.com/u/428789cb6348\">Wonil Suh</a> and <a href=\"https://www.linkedin.com/in/robertahahn/\">Roberta Hahn</a>. It is an incredible experience to be working alongside these extremely smart people.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Rg77fLHKCUS7tQiVPRqXKQ.png\" /></figure><h4>Appendix: Description of steps</h4><figure><img alt=\"Triage. An eye icon in a circle. Colored black, magenta and blue.\" src=\"https://cdn-images-1.medium.com/max/1024/1*XYZYOscYilEKyF5QLh6t0Q.png\" /></figure><h4><strong>1. Triage</strong></h4><p>Determine if this is the right work to do and when is a reasonable time for the team to tackle it. This is done by PM, squad leads, and fire-line team members. Our <strong>fire-line team </strong>is made up of representatives from the design and development team, and the team members rotate every sprint.</p><figure><img alt=\"Design. A pencil icon in a magenta circle.\" src=\"https://cdn-images-1.medium.com/max/1024/1*Zja3wNHtsyHFUHFv64xpXw.png\" /></figure><h4>2. Design</h4><p>Discovery, research, and rounds of design explorations. This is when designers dive in and do competitive research, talk to stakeholders and adopter teams to better understand the end user’s expectation, gather data and metrics, explore solutions, get reviews and critiques, iterate, and finally identify a solution. The whole shebang.</p><figure><img alt=\"Spec. A magnifying glass icon in a circle, colored magenta and blue.\" src=\"https://cdn-images-1.medium.com/max/1024/1*-S03OO37jqeEdpWwMsyY6A.png\" /></figure><h4><strong>3. Spec</strong></h4><p>There are many tools out there to help with red lining or hand off to development, but as a step in the process, it still requires attention. This is when the designers and developers stare at the same thing together, and exchange notes and patch what’s missed. We keep both detailed visual and functional specs. These documents help immensely with triaging bug tickets later.</p><figure><img alt=\"Code. Icon showing &lt;/&gt;. Inside a blue circle\" src=\"https://cdn-images-1.medium.com/max/1024/1*ws3gOm1n67zfdET-_1LOqA.png\" /></figure><h4><strong>4. Code</strong></h4><p>Developer (<em>picks up keyboard, 2 seconds later</em>): ✨Tada! 🎉 Is this what you want?</p><p>Designer: Nice, almost there! Just a few —</p><p>Developer: Did this take two months to design?</p><p>Designer <em>(swallows in dry throat): …(then breaks down into inconsolable sobbing.)</em></p><figure><img alt=\"Test. Icon showing lines and checkmarks inside a blue circle\" src=\"https://cdn-images-1.medium.com/max/1024/1*BpbPICbNm7E_1SQXdkxsYQ.png\" /></figure><h4><strong>5. Testing</strong></h4><p>Testing starts after Code freeze, and could take a while to complete. This is to ensure the changes on the code behave as expected on other browsers and devices. We use a fair amount of automation to speed it up and increase coverage. In addition, we do visual regression testing with every code merge. There is front-loaded work to write these tests, and then we update when necessary. For details on how our awesome robot army helps with end-to-end testing, and keeps up with upstream and manage releases, checkout <a href=\"https://medium.com/carbondesign/automating-a-design-system-69bd2414f75\">Automating a Design System</a> from our Development lead and architect <a href=\"https://medium.com/u/18e8f1b7f20a\">Jeff Chew</a>.</p><figure><img alt=\"Documentation. Book icon inside magenta and blue circle.\" src=\"https://cdn-images-1.medium.com/max/1024/1*-bGOn67jkozeSWS4SDskmw.png\" /></figure><h4><strong>6. Write documentation</strong></h4><p>After handing off the work at the end of <strong>Step</strong> <strong>3. Spec</strong>, designers begin documenting the intent and usage of the component or feature for our adopters. This means updating the design system website. If it is done before the dev team is able to complete the code, the updated documentation can be a pull request approved and ready, waiting to merge at the next code release. Developers also have technical documentations to write, which can happen concurrently with design documentation.</p><figure><img alt=\"Design kit. A document with sketch icon at the corner, in a magenta circle.\" src=\"https://cdn-images-1.medium.com/max/1024/1*AXDrytQfbtb6RLX1_3VmYw.png\" /></figure><h4><strong>7. Design kits</strong></h4><p>There are usually design assets created already by this point. But these are not easily found or distributed. Especially in the case of a new feature or a new component, it has to be added to our design kits to be delivered to adopters. Usually this requires rebuilding the thing to ensure the Sketch symbols or Figma components are reusing foundational elements.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dz5aqUmVXfxTsC0yMHVtjQ.png\" /></figure><h4><strong>8. QA</strong></h4><p>Never skip the QA, even for small bug fixes. This is done by both designers and developers. If you remember from above, we have some automated testing done. One of these is the visual regression testing done using<a href=\"https://www.browserstack.com/percy\"> BrowserStack Percy</a>. Percy creates snapshots of the new build and puts it against the old build snapshots for a comparison. Any differences are highlighted and shown as a fail. These visual differences need to be approved by a designer.</p><p>We have a process to distribute PRs to team members to review, and a set of standardized review instructions. Realizing reviewing PRs is actually a lot of work, we also started tracking time spent on PR reviews by creating a ticket every sprint with flexible story points.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GVMAt0xfNlWKAYTC2LKFyA.png\" /></figure><h4>9. Tooling</h4><p>We are working on a governance tool, called Beacon, designed for evaluating pages for compliance with the design system. It can be used by product managers and stakeholders, or adopter teams to self-evaluate their adoption maturity. Again, with the evolving library, the evaluation criteria in Beacon needs to be frequently updated. There is design input, such as what violation is severe and worth a fail. At the moment this is primarily a developer task.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DK_Uwk-2gOu2eANoSb_Vgw.png\" /></figure><h4>10. Release code</h4><p>At last, the work that passes QA and regression testing is ready for release. At the moment our release is scheduled every three weeks. This could change depending on the adopter team’s needs and state of the library’s growth. We have pretty much fully automated this step, and it is managed by the dev team.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fb84387deef8\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/carbondesign/the-power-to-serve-fb84387deef8\">The power to serve</a> was originally published in <a href=\"https://medium.com/carbondesign\">_carbondesign</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","content:encodedSnippet":"Lessons learned on design system team operation and workflows\nFor a system to be adopted at scale, the design system team has to operate like a service, where backstage activities are coordinated and choreographed to enable a desired onstage experience.\nIn February 2021, I was fortunate to join the leadership team as the Design Lead of Carbon for IBM.com design system. While our goals are connected to consistency and brand expression, our success as a team has far exceeded those categories. We have successfully refined our team’s operation and workflows, delivering seven-fold growth in adoption within ten months. It took me some time to digest this tremendous experience. Here are my reflections on what might have worked and why.\nSome context about the Carbon for IBM.com design system\nOur design system supports specifically the needs of IBM.com, IBM’s corporate website with over 20 million pages built on two legacy design systems, with hundreds to thousands of globally distributed owners.\nCarbon for IBM.com\nOur team’s objectives and challenges are shared by many design system teams. We want to encourage teams adopting the system to reuse as much as possible, but these teams often face aggressive timelines and are tempted by customization and quick hacks. There is a healthy amount of executive pressure on us to not become a bottleneck to others, and to continue to drive consistency and beautiful brand expression in what hits the glass.\nWe had to aim for the success of all parties : the adopters of the system need to ship; the stakeholders need results, and the system team needs a healthy pace to run the distance. A design system is a large investment — a bet on efficiency through reuse.\nCreating the system is only half the battle. Sustainable operation, successful adoption, and observable value return are my focus today.\nLesson 1: a project, a product, a service\nMost would acknowledge today that a design system is not a one time project, but a product or a program that requires ongoing maintenance. These labels don’t highlight the importance of design system adoption efforts. For a system to be adopted at scale, the design system team has to operate like a service provider.\nLet’s start with self-service, which should have required minimum attention from the design system team. The Carbon for IBM.com design system is open-source so we have a public GitHub repository, and we maintain a public website for usage documentation. Our sprint plans and work-in-progress designs are available on ZenHub and Box, so all IBMers can view. These decisions provide transparency and enable a large number of adopters to self-serve on getting status updates on their requests. However, those familiar with Service Design would be quick to point out these are only a surface experience, and a lot of backstage work is needed to achieve it. In order to arrive at a delightful and seamless service delivery, an end-to-end, surface-to-core perspective has to be applied to the operation. Otherwise, GitHub issues can be out of date, and Box can be a labyrinth of nested folders, and the purpose of self-service through transparency would be lost.\nExample of publicly available project status information and usage documentation\nTo make sure we are on top of every touch point with our adopters, we formed a “fire line” support team, which is a roster of one designer and one developer assigned for the sprint to watch our Slack and GitHub activities. These are our “first responders” and can close out a good portion of the inquiries by leveraging their own knowledge and connections. When we realized increased adoption created more implementation questions, we added one more developer to the fire line to increase response time and make the workload more manageable.\nThe Carbon for IBM.com leadership team meets twice a week to triage new issues in GitHub. We use a collaboration method internally referred to as the “four-in-the-box” model, where design lead, development lead, product owner, and project manager get together, and align on decisions, next steps, scheduling, and move the issues down the pipeline. This method helps us closely monitor and respond to the touch points with the adopters, so that the surface experience is an efficient and reliable one. To keep these meetings efficient, fire-line designers and developers fill in any “blanks” that may have come up during triage.\nTroubleshooting for adopters\nAside from GitHub, we have other channels of connection with adopters, including weekly office hours. Office hours are hosted by the design system team and open to anyone in IBM interested in the design system. IBMers are invited to come with questions, work in progress, blockers, or anything. In some parts of IBM, there’s often only one designer on the team, and they can come to us during this weekly time slot for design feedback, grow their skills, and join a virtual design community.\nWe’ve created Away Missions where a Carbon for IBM.com team member joins an adopter team on a short-term engagement project. This has been especially fruitful in activating adopter teams’ developers in learning to use the system. For high-priority adopters, such as the Adobe Experience Manager team in charge of creating page templates, the leadership team has bi-weekly or monthly check-ins to see if they are on track with their adoption and address any blockers.\nThese benefit our work in a lot of ways. Beyond facilitating the product teams’ adoption progress and building up a good relationship, we also became frequent witnesses to serendipitous encounters. A frequent occurrence in our office hours is when team X comes with an ask, and we can show them that team Y already has a similar request in the pipeline, and it often fits their needs.\nI observed how these strategies made every team member more aware of our role in the bigger picture — to serve our adopter teams so they can succeed. The design system teams connect the dots between product teams, create alignments, and boost efficiency while playing a supporting role. Our role in governance comes second. When pushback on requests are needed, for example when the request conflicts with IBM’s design and content standards, it is done through the leadership team, with clear documentation. In the end, the win for us is that the system got adopted, the components got reused, and IBM’s public digital storefront got a little bit tidier.\nLesson 2: prioritization, process, and pace\nThe more services we offer, the more others depend on us. This can go to a dangerous extreme. The design system team members have to take care of themselves and make sure we don’t drown in meetings. This quickly became my number one concern after I joined the team — after all, we still have a whole library to build and maintain. The design system team members’ day-to-day lives should not be always at the mercy of adopter teams’ deadlines and their executives.\nPrioritization is a must. Understanding how a request relates to the current business focus is essential, and there are many helpful prioritization methods out there. However the bigger challenge, in our experience, is putting a time frame on this prioritized backlog so it is not all for “some time in the indefinite future.” An estimated delivery date is a basic requirement for good service.\nWe found that leaning into a transparent and robust process of working helps to create this estimated time frame, and make our adopter teams understand some very important things:\n\nThings take time. We are not miracle workers.\nOur quality is high because we never skip important steps such as QA.\nThey can help too!\n\nWith these understandings in place, we can delay or push back on requests we are unable to fulfill without alienating adopters, expand our capacity by encouraging contribution, and really pace ourselves for the long run.\nBelow is a high-level overview of our workflow. Steps colored magenta are work primarily handled by designers; blue steps are handled by developers, and black-colored steps are handled by the leadership team. (You can find detailed step descriptions in the Appendix.)\nDepending on the type and scope of work, only some of these steps might be needed:\nA bug might only take us four steps to close it out. A typical feature request engages the whole team, but some design and dev work can happen concurrently.\nThe best part is external teams contributing! Below is an example of when we partnered with the AEM template team on some of their feature requests. We were able to let go of the wheel and play an advisory role, allowing the whole ship to sail faster:\nWe encourage both design and code contributions\nThe workflow feels hypothetical until it becomes part of a release schedule. Keeping in mind that the goal is to arrive at a transparent and robust process ensures success for all parties, so a timeline is really helpful.\nHere’s how we arrived at a timeline with some important dates to observe:\nWe practice the standard two-week sprint. Below is the calendar for our version 1.20 to 1.22 releases. We quickened the release pace by one week so our adopters can get the changes faster.\nCalendar for our v1.20 to v1.22 releases, where release date is in dark blue, and code freeze lasts for a week.\nToo often, release cycles are discussed as a developer-only activity. This is false, and unhealthy. This schedule has significant impact on a design team’s workload and pace, so here are the additional relevant dates when designers’ work are taken into consideration:\n\nDesign and specs freeze is three weeks before the next code freeze. It’s pencil down time. This gives the dev team a reasonable amount of time to implement by code freeze.\nPull request submission date has to be at least three days before code freeze to allow time for the design team to do design QA. Designers can block a merge if the implementation is below standard from a design perspective. Thanks to Browserstack Percy, visual review has become very straightforward. Conscientious developers can even run and check Percy results before submitting the PR to reduce design QA cycles.\nDates that requires design attention — in addition to code freeze — are PR submission date and design and spec freeze date\nPutting the release cycle together with the workflows, it becomes easy to see whether expecting a feature request by a particular date is realistic, or to plan ahead by backtracking the days to give time for every necessary step. Below are a few hypothetical examples; in reality, one can expect a bit more gaps between the steps as the individual is often handling more than one request or bug per release.\nHypothetical example timelines. In reality, one can expect a bit more gaps between the steps as the individual is often handling more than one request or bug per release.\nThe team is constantly looking at possible ways to be more efficient. Our testing period, for example, has already become much shorter since last year thanks to automation. For more, check out Automating a design system from our Development Lead and Architect Jeff Chew.\nLesson 3: observable value return\nPick a key performance index (KPI) that resonates with executives, but be mindful of the inevitable limitation of simplifying a complex reality into a single number.\nFor Carbon for IBM.com, our KPI is the amount of pageviews. We track the page view of pages built with Carbon vs the pages built with legacy design systems to see the amount of adoption. Pageviews as a metric is more accurate to measure adoption than the more straightforward number of pages. IBM.com has over 20 million pages, but a small portion of the pages garner over 80% of the total traffic. Pageviews’ direct connection with traffic makes our impact clear and observable.\nWe started the year with 6.2% of all pageviews attributed to pages built with Carbon. By the end of November that same year, 44.8% of page views of all pages on IBM.com were attributed to us. Meanwhile, the page views attributed to the deprecated design system Northstar has been steadily reducing from 54% to 21%, suggesting the increase in page views we got is not just from new pages, but also because page owners are successfully migrating their pages over.\nBar chart showing the change in pageviews of Carbon built pages between February and November\nThis result carries some caveats. Instrumentation has limitations. It’s easy for the tool to decide whether a page is using Carbon for IBM.com as a dependency, but hard for it to know how much — nevermind how well — the page is using the system. It is very likely a page out there is getting counted but is only using one of our components, or worse, has broken every usage rule. It’s hard to deny the necessity of a KPI, but hopefully we will all become a little bit wiser if we keep up a healthy habit to scrutinize every number.\nClosing thoughts\nYesterday, I came across the Sales organization’s upbeat monthly letter, filled with actions and demands: “Make the move! Close the deal!” And I was instantly thankful that, being on a design system team, we don’t have to “win,” generate revenue, or beat out competition — at least not directly.\nAlthough we had to prove our impact in other ways, we are here to serve. It is only one website we have influence over! But this thought relaxed my nerves. There’s power in thinking that if we do our work right, we can make everyone a winner.\nMeet the team\nThe above practices, workflow, and metrics were very much in place before I joined the team, and credit goes to the present and past leads who created them and matured them over time: Linda Carotenuto, Jeff Chew, and Wonil Suh and Roberta Hahn. It is an incredible experience to be working alongside these extremely smart people.\n\nAppendix: Description of steps\n\n1. Triage\nDetermine if this is the right work to do and when is a reasonable time for the team to tackle it. This is done by PM, squad leads, and fire-line team members. Our fire-line team is made up of representatives from the design and development team, and the team members rotate every sprint.\n\n2. Design\nDiscovery, research, and rounds of design explorations. This is when designers dive in and do competitive research, talk to stakeholders and adopter teams to better understand the end user’s expectation, gather data and metrics, explore solutions, get reviews and critiques, iterate, and finally identify a solution. The whole shebang.\n\n3. Spec\nThere are many tools out there to help with red lining or hand off to development, but as a step in the process, it still requires attention. This is when the designers and developers stare at the same thing together, and exchange notes and patch what’s missed. We keep both detailed visual and functional specs. These documents help immensely with triaging bug tickets later.\n\n4. Code\nDeveloper (picks up keyboard, 2 seconds later): ✨Tada! 🎉 Is this what you want?\nDesigner: Nice, almost there! Just a few —\nDeveloper: Did this take two months to design?\nDesigner (swallows in dry throat): …(then breaks down into inconsolable sobbing.)\n\n5. Testing\nTesting starts after Code freeze, and could take a while to complete. This is to ensure the changes on the code behave as expected on other browsers and devices. We use a fair amount of automation to speed it up and increase coverage. In addition, we do visual regression testing with every code merge. There is front-loaded work to write these tests, and then we update when necessary. For details on how our awesome robot army helps with end-to-end testing, and keeps up with upstream and manage releases, checkout Automating a Design System from our Development lead and architect Jeff Chew.\n\n6. Write documentation\nAfter handing off the work at the end of Step 3. Spec, designers begin documenting the intent and usage of the component or feature for our adopters. This means updating the design system website. If it is done before the dev team is able to complete the code, the updated documentation can be a pull request approved and ready, waiting to merge at the next code release. Developers also have technical documentations to write, which can happen concurrently with design documentation.\n\n7. Design kits\nThere are usually design assets created already by this point. But these are not easily found or distributed. Especially in the case of a new feature or a new component, it has to be added to our design kits to be delivered to adopters. Usually this requires rebuilding the thing to ensure the Sketch symbols or Figma components are reusing foundational elements.\n\n8. QA\nNever skip the QA, even for small bug fixes. This is done by both designers and developers. If you remember from above, we have some automated testing done. One of these is the visual regression testing done using BrowserStack Percy. Percy creates snapshots of the new build and puts it against the old build snapshots for a comparison. Any differences are highlighted and shown as a fail. These visual differences need to be approved by a designer.\nWe have a process to distribute PRs to team members to review, and a set of standardized review instructions. Realizing reviewing PRs is actually a lot of work, we also started tracking time spent on PR reviews by creating a ticket every sprint with flexible story points.\n\n9. Tooling\nWe are working on a governance tool, called Beacon, designed for evaluating pages for compliance with the design system. It can be used by product managers and stakeholders, or adopter teams to self-evaluate their adoption maturity. Again, with the evolving library, the evaluation criteria in Beacon needs to be frequently updated. There is design input, such as what violation is severe and worth a fail. At the moment this is primarily a developer task.\n\n10. Release code\nAt last, the work that passes QA and regression testing is ready for release. At the moment our release is scheduled every three weeks. This could change depending on the adopter team’s needs and state of the library’s growth. We have pretty much fully automated this step, and it is managed by the dev team.\n\nThe power to serve was originally published in _carbondesign on Medium, where people are continuing the conversation by highlighting and responding to this story.","dc:creator":"Shixie","guid":"https://medium.com/p/fb84387deef8","categories":["process-improvement","operations","service-design","pace","design-systems"],"isoDate":"2022-04-26T15:04:07.000Z"},{"creator":"D.A. Kahn","title":"Carbon v11 Accessibility","link":"https://medium.com/carbondesign/carbon-v11-accessibility-2f0344f74af6?source=rss----105693e8ddba---4","pubDate":"Fri, 22 Apr 2022 14:06:09 GMT","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MHDS_rEc80ekwmdHHw_LLg.jpeg\" /></figure><p>For Carbon, web accessibility isn’t just about compliance. Even if a component or experience meets an established standard, it could still be problematic for users. On the Carbon team we approach accessibility, not as an end state, but as an ongoing practice. We integrate expert guidance, user research, and state-of-the-art development techniques throughout the lifecycle of a project, from initial ideation to release — doubling back, refactoring, or reconsidering past approaches — as new techniques, research or standards become available.</p><p><strong>Building an accessibility practice</strong><br>Carbon’s accessibility has its foundation in the Web Content Accessibility Guidelines (WCAG) — a constantly evolving document that represents our industry’s current understanding of how to make the web as inclusive as possible. When new problems become apparent, solutions are proposed and either accepted or rejected. Subsequently, the WCAG document is updated with version numbers much like any piece of software. For Carbon to anticipate these changes and implement the guideline’s recommendations holistically, a cross-team collaboration of designers, developers and IBM Accessibility experts was born: The Carbon Accessibility Guild.</p><p>The guild allows us to move quickly and decisively around improvements and remediation in Carbon’s upcoming v11 release and beyond. With their help we’ve revisited and refactored two long-standing, essential components — notifications and tooltips — to provide everyone with a more accessible and usable experience.</p><p><strong>Better actionable notifications</strong></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7vZTT_oIWfKvDfduke8tOg.png\" /><figcaption>Two toast notifications updating the user on a server’s status</figcaption></figure><p>From an accessibility perspective, notification types (e.g., inline, toast) are not only differentiated by styling and usage. Under the hood, implementation details, like ARIA (Accessible Rich Internet Applications) — a technology that allows for expanded and customized accessibility — and focus management, are crucial when the user needs to carry out an action contained inside that notification, like clicking a link or pressing a button. If the action supports task completion, a keyboard or screen reader user may find it impossible to navigate to the notification, because its location in the DOM (Document Object Model) — and by extension the accessibility tree — is inconsistent. This oversight in v10 created the potential for keyboard or screen reader users to become stranded unless teams built custom app level focus management.</p><p>In the v11 release, InlineNotification and ToastNotification have been refactored and no longer support user actions. The newly introduced ActionableNotification has unique focus management and ARIA to provide a consistently accessible experience and can be configured for either a Toast or an Inline usage context.</p><p><strong>More accessible icon tooltips</strong></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tp94IHtDFVnB8bwfvWPbtQ.png\" /><figcaption>Hover or focus on an interactive component triggers any associated Tooltip</figcaption></figure><p>TooltipIcon has also been removed in v11. For anyone using a screen reader or keyboard, it didn’t make sense to have a tooltip inside of a non-interactive icon element. In that implementation, the tooltip would never be revealed to the users since the icon wasn’t capable of receiving focus. Instead, the recommendation — and user expectation — here, would be something closer to a disclosure pattern, in which a button triggers a dialog that rendered on top of the existing page.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rTU2sny4g9MEg59tV1J1ZA.png\" /><figcaption>An icon button beside a Tags label. When the user clicks on it it reveals a Tooltip.</figcaption></figure><p>To remedy this, we’ve split TooltipIcon into 2 components: Tooltip and Toggletip. Tooltip reveals a text-only tooltip when an interactive component receives hover or keyboard focus. Toggletip uses a button that reveals information when the user activates it (via click or Enter). As such, it can be used to provide text information or reveal further actions. Sighted users still have UX consistency with v10, while keyboard users have an improved and predictable experience.</p><p><strong>Moving forward accessibly</strong></p><p>Not described here are dozens more accessibility updates and fixes — like improved contrast for certain color tokens in certain use cases, better compatibility with Windows High Contrast mode, and expanded component accessibility documentation, to name a few. The Carbon v11 release represents a more inclusive, accessible, and usable foundation on which to build future products and services at IBM. That said, there’s still plenty of work to be done and we will always strive to deliver a more empathetic and kind experience for all of our users. Coming up we’ll have component specific deep dives highlighting v11 improvements you can take advantage of now. We can’t wait to build it with you.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2f0344f74af6\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/carbondesign/carbon-v11-accessibility-2f0344f74af6\">Carbon v11 Accessibility</a> was originally published in <a href=\"https://medium.com/carbondesign\">_carbondesign</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","content:encodedSnippet":"For Carbon, web accessibility isn’t just about compliance. Even if a component or experience meets an established standard, it could still be problematic for users. On the Carbon team we approach accessibility, not as an end state, but as an ongoing practice. We integrate expert guidance, user research, and state-of-the-art development techniques throughout the lifecycle of a project, from initial ideation to release — doubling back, refactoring, or reconsidering past approaches — as new techniques, research or standards become available.\nBuilding an accessibility practice\nCarbon’s accessibility has its foundation in the Web Content Accessibility Guidelines (WCAG) — a constantly evolving document that represents our industry’s current understanding of how to make the web as inclusive as possible. When new problems become apparent, solutions are proposed and either accepted or rejected. Subsequently, the WCAG document is updated with version numbers much like any piece of software. For Carbon to anticipate these changes and implement the guideline’s recommendations holistically, a cross-team collaboration of designers, developers and IBM Accessibility experts was born: The Carbon Accessibility Guild.\nThe guild allows us to move quickly and decisively around improvements and remediation in Carbon’s upcoming v11 release and beyond. With their help we’ve revisited and refactored two long-standing, essential components — notifications and tooltips — to provide everyone with a more accessible and usable experience.\nBetter actionable notifications\nTwo toast notifications updating the user on a server’s status\nFrom an accessibility perspective, notification types (e.g., inline, toast) are not only differentiated by styling and usage. Under the hood, implementation details, like ARIA (Accessible Rich Internet Applications) — a technology that allows for expanded and customized accessibility — and focus management, are crucial when the user needs to carry out an action contained inside that notification, like clicking a link or pressing a button. If the action supports task completion, a keyboard or screen reader user may find it impossible to navigate to the notification, because its location in the DOM (Document Object Model) — and by extension the accessibility tree — is inconsistent. This oversight in v10 created the potential for keyboard or screen reader users to become stranded unless teams built custom app level focus management.\nIn the v11 release, InlineNotification and ToastNotification have been refactored and no longer support user actions. The newly introduced ActionableNotification has unique focus management and ARIA to provide a consistently accessible experience and can be configured for either a Toast or an Inline usage context.\nMore accessible icon tooltips\nHover or focus on an interactive component triggers any associated Tooltip\nTooltipIcon has also been removed in v11. For anyone using a screen reader or keyboard, it didn’t make sense to have a tooltip inside of a non-interactive icon element. In that implementation, the tooltip would never be revealed to the users since the icon wasn’t capable of receiving focus. Instead, the recommendation — and user expectation — here, would be something closer to a disclosure pattern, in which a button triggers a dialog that rendered on top of the existing page.\nAn icon button beside a Tags label. When the user clicks on it it reveals a Tooltip.\nTo remedy this, we’ve split TooltipIcon into 2 components: Tooltip and Toggletip. Tooltip reveals a text-only tooltip when an interactive component receives hover or keyboard focus. Toggletip uses a button that reveals information when the user activates it (via click or Enter). As such, it can be used to provide text information or reveal further actions. Sighted users still have UX consistency with v10, while keyboard users have an improved and predictable experience.\nMoving forward accessibly\nNot described here are dozens more accessibility updates and fixes — like improved contrast for certain color tokens in certain use cases, better compatibility with Windows High Contrast mode, and expanded component accessibility documentation, to name a few. The Carbon v11 release represents a more inclusive, accessible, and usable foundation on which to build future products and services at IBM. That said, there’s still plenty of work to be done and we will always strive to deliver a more empathetic and kind experience for all of our users. Coming up we’ll have component specific deep dives highlighting v11 improvements you can take advantage of now. We can’t wait to build it with you.\n\nCarbon v11 Accessibility was originally published in _carbondesign on Medium, where people are continuing the conversation by highlighting and responding to this story.","dc:creator":"D.A. Kahn","guid":"https://medium.com/p/2f0344f74af6","isoDate":"2022-04-22T14:06:09.000Z"},{"creator":"Josh Black","title":"Carbon v11","link":"https://medium.com/carbondesign/carbon-v11-72ace7fac01f?source=rss----105693e8ddba---4","pubDate":"Thu, 31 Mar 2022 20:18:09 GMT","content:encoded":"<h4>The next major version of Carbon is here</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Pv9OA0GM5rFOSVnUKDH7wA.jpeg\" /></figure><p>We’re excited to announce the next major release of Carbon. 🥳 With this release, we are shipping a number of updates to improve the experience of using Carbon, along with a migration experience to move as seamlessly as possible from v10 to v11.</p><p>If you’re looking to get started migrating, check out our <a href=\"https://carbondesignsystem.com/migrating/guide/overview/\">Migration Guide</a>. If you want to learn more about the new features and changes coming in this release, keep reading below.</p><h3>Theming</h3><p>One of the first areas we revisited in v11 was our color tokens. We heard from you all that the names of tokens can be confusing and hard to understand, making it difficult to accurately apply them without constantly referencing our site.</p><p>To address this, we investigated several ways to represent usage directly in the token name in order to make them more intuitive to use. After discussing these various options and going through rounds of feedback on <a href=\"https://github.com/carbon-design-system/carbon/discussions/7827\">GitHub</a>, we decided on an approach that makes it easier to understand and apply tokens based on their usage.</p><figure><img alt=\"Comparing the names of tokens for parts of a component between v10 and v11\" src=\"https://cdn-images-1.medium.com/max/1024/1*Q9zkG4-gZvWdW6iA6YwRQA.png\" /></figure><p>To learn more about the new color tokens, check out our <a href=\"https://carbondesignsystem.com/guidelines/color/usage\">Color Guidelines</a>. You can also learn more about concepts like layering <a href=\"https://carbondesignsystem.com/guidelines/color/implementation\">here</a>.</p><p>For teams that currently are using tokens from v10, rest assured that you can keep using these tokens in v11. In order to help the transition between tokens, we’ve created a compatibility theme in v11 that will allow teams to use the same tokens in components they’ve built today while progressively transitioning to newer tokens over time.</p><h4>Light &amp; Dark mode</h4><p>All of these updated color tokens are now shipped as CSS Custom Properties in v11. This technique makes it incredibly simple and performant to customize the theme of your product. We’re most excited about using this for Light &amp; Dark Mode support in products.</p><figure><img alt=\"A product interface shown in a light and dark theme side-by-side\" src=\"https://cdn-images-1.medium.com/max/1024/1*Cpf6j8XWbJyMiVtCFhcJRw.png\" /></figure><p>This technique also can allow teams to customize a specific area of the page, a specific component, or other models within their product. The best part is that any component using our color tokens just works, regardless of the page or inline theme.</p><h4>Typography</h4><p>Type tokens are being updated in v11 along with the changes to color tokens. These changes involve mostly name changes. The values and roles of these tokens remain the same between v10 and v11.</p><p>To learn more about the new type tokens in v11, check out our <a href=\"https://www.carbondesignsystem.com/guidelines/typography/productive\">Typography Guidelines</a>. If you’re curious about specific changes to tokens, take a look at our <a href=\"https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#type-tokens\">v11 Migration Docs</a>.</p><h3>Design Kits</h3><p>All v11 changes — including type and color token name updates — have been made in our Sketch kits. The same Sketch Cloud libraries that were used in v10 have been updated to include the v11 changes. The v11 update is available like any other Sketch library update. We recommend that you do not accept the library update until you are ready to work with v11.</p><p>The v11 update for Figma is not yet available. We are waiting to make the v11 updates after some additional v10 enhancements have been completed. Like with Sketch, the same libraries used for v10 will be the same libraries used for v11. The targeted release date for Figma is the end of April. Along with the v11 release, we will also be releasing the Figma kits to the open community.</p><h3>New packages</h3><p>Carbon v11 introduces new code packages to simplify how you bring Carbon into your project. For many teams, you may be installing several packages in order to use Carbon, including:</p><ul><li>carbon-components</li><li>carbon-components-react</li><li>carbon-icons</li><li>@carbon/icons-react</li></ul><p>Starting in v11, the styles, React components, and icons are all available under the @carbon/react package. Each of the packages above can still be downloaded individually but we brought them together to simplify bringing Carbon into your project.</p><p>The @carbon/styles package is also being introduced in v11. This package contains all of the Sass styles for our components and is being re-exported by @carbon/react. The Sass styles in this package have gone through a number of updates as we’ve shifted over to Dart Sass in order to improve our compile times by over 90%.</p><h3>Dart Sass</h3><p>Sass files in Carbon now require <a href=\"https://sass-lang.com/dart-sass\">Dart Sass</a> in order to compile. The decision to move towards Dart Sass was made after the announcement in the blog post, <a href=\"https://sass-lang.com/blog/libsass-is-deprecated\">LibSass is deprecated</a>. Like many of you who use Sass, we’ve relied heavily on LibSass through projects like node-sass. We would not be where we are today without all the hard work and effort that went into these projects 🙌</p><h4>Sass Modules</h4><p>With the transition to using sass, Carbon has updated its Sass files to leverage Sass Modules. This new module system was <a href=\"https://css-tricks.com/introducing-sass-modules/\">introduced in 2019</a> and we knew that it would be a great fit for the way Carbon authors and ships Sass files.</p><p>This new module system created an opportunity to simplify how you bring styles into your project from Carbon, while drastically reducing compile times. The best part is that you can still @import any of the files from Carbon if you would like, there is no requirement for you and your project to move to Sass Modules in order to benefit from these changes.</p><h4>Compile time improvements</h4><p>One of the most common and frustrating challenges team can run into when using Carbon are long Sass compilation times. Parts of this were related to how Carbon was structured, other parts were related to toolchains, but overall we are incredibly excited to announce that we drastically improved the performance of compiling Carbon Sass files in v11.</p><p>Through moving to Dart Sass, migrating to Sass Modules, and changing our overall file structure we were able to achieve a 90% decrease in average recompilation times when using sass-loader along with a 60% reduction in initial build times.</p><p>We’re so excited to be able to ship this work in v11 and can’t wait to keep improving on these numbers so that your development feedback loop is as quick as possible.</p><h3>CSS Grid</h3><p>We’re shipping a brand new way to incorporate the <a href=\"https://www.ibm.com/design/language/2x-grid\">2x Grid</a> in code using a technique in CSS called <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout\">CSS Grid</a>. This implementation ships alongside our Flexbox-based grid that currently exists in v10 and we will continue to support both in v11.</p><p>CSS Grid, along with CSS Custom Properties, makes it easier to build more resilient products on the Grid through CSS Grid-specific techniques or through new features that we’re able to bring like sub-grid for more complex products.</p><p>If you’re building on any of our Grid components in v10, every one of these will continue to be supported in v11. If you would like to learn more about how to use CSS Grid in your project, you can check out our documentation in <a href=\"https://carbon-components-react.netlify.app/?path=/docs/elements-grid--default\">React</a>.</p><h3>React Components</h3><p>We’re shipping several new components in v11 to accompany the changes that we’re making to styles. Theming, layering, CSS Grid, and more are all available as components in our React library.</p><p>We’re also using this release to address some of the outstanding accessibility issues for components like Notification and Tooltip along with consistently applying how we name and define certain prop types in v11.</p><h4>Theming and Layering</h4><p>In order to support the new theming features coming to v11, we’re shipping components like GlobalTheme and Theme to make it as easy as possible to change the theme of an entire page or a sub-section of a page. These components are paired alongside the useTheme hook to allow component authors to access the current theme for a given context.</p><p>We’re also introducing a new Layer component to simplify how layering is accomplished in v11. Previously, we used the light prop to address the layering needs for the white and g10 themes. Now, the Layer component can be used along with contextual tokens to implement layering across themes.</p><h4>Grid</h4><p>The default grid in v11 is now implemented using CSS Grid. As a result, you’ll only need to use two components to build layouts on top of the 2x grid: Grid and Column. For teams that already have layouts built on the flexbox version of our grid components, rest assured you can update your code to use FlexGrid along with the existing Row and Column components and your layouts will continue to work as expected.</p><h4>Accessibility Updates</h4><p>In order to ship accessible versions of some of our components, we’ve made updates or breaking changes to either change or remove inaccessible behavior.</p><p>For example, our Notification component no longer accepts interactive content as the semantics of this context would be stripped from users of Screen Readers. To better support common use cases of components where interactive content was needed, we are also shipping new components like ActionableNotification to offer a better, accessible experience for these use cases.</p><p>Tooltip, TooltipIcon, and TooltipDefinition are also receiving updates in v11 and mirror some of the changes seen in Notification. For example, Tooltips can now only contain interactive content. For situations that require interactive content, we are shipping a new component: Toggletip.</p><h4>Changes to icons</h4><p>One of the largest changes that came to Carbon in v10 was the set of icons that we supported. This set grew tremendously due to the hard work of the brand team at IBM, and we went from supporting around 150 icons to over 1600 as a result.</p><p>The package size for these icons quickly ballooned as we shipped an export for each icon size. In v11, we decided to reduce the complexity of managing a package that large by shipping the icon as a component and customizing its size with the size prop.</p><p>This approach lead to a 75% decrease in the number of exports and files shipped through our @carbon/icons-react package and will make it easier to bring this package into your toolchain.</p><h4>Changes to component size</h4><p>Speaking of size changes, we have updated the size prop for components in order to make sizing consistent across all of our components. Before, this prop would accept a variety of values like field, medium, and short. Now, this prop has the same names across components to make sizing clearer.</p><p>You can learn more about these changes <a href=\"https://carbondesignsystem.com/migrating/guide/design/#sizing-breaking\">here</a>.</p><h3>What’s coming next</h3><p>The Carbon team is so excited to finally bring all of these updates to you! 🥳 Our team is focusing on improving the migration experience from v10 to v11 and sharing more about all the new features coming in this release.</p><p>For teams still on v10, the Carbon team will continue to support these packages with bug fixes. There are also many items we wanted to see in v11 that didn’t quite make it. We are excited to bring those to you in Q2 2022.</p><p>If you have any questions or feedback for this release, feel free to reach out over on Slack or through <a href=\"https://github.com/carbon-design-system/carbon/discussions/categories/help\">GitHub Discussions</a>!</p><p><em>Josh Black is a Software Engineer based out of Austin, TX working on the Carbon Design System. The above article is personal and does not necessarily represent IBM’s positions, strategies, or opinions.</em></p><p><em>Questions or comments about Carbon? Reach out at </em><a href=\"mailto:carbon@us.ibm.com\"><em>carbon@us.ibm.com</em></a><em> or tweet us </em><a href=\"https://twitter.com/_carbondesign\"><em>@_carbondesign</em></a><em>.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=72ace7fac01f\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/carbondesign/carbon-v11-72ace7fac01f\">Carbon v11</a> was originally published in <a href=\"https://medium.com/carbondesign\">_carbondesign</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","content:encodedSnippet":"The next major version of Carbon is here\n\nWe’re excited to announce the next major release of Carbon. 🥳 With this release, we are shipping a number of updates to improve the experience of using Carbon, along with a migration experience to move as seamlessly as possible from v10 to v11.\nIf you’re looking to get started migrating, check out our Migration Guide. If you want to learn more about the new features and changes coming in this release, keep reading below.\nTheming\nOne of the first areas we revisited in v11 was our color tokens. We heard from you all that the names of tokens can be confusing and hard to understand, making it difficult to accurately apply them without constantly referencing our site.\nTo address this, we investigated several ways to represent usage directly in the token name in order to make them more intuitive to use. After discussing these various options and going through rounds of feedback on GitHub, we decided on an approach that makes it easier to understand and apply tokens based on their usage.\n\nTo learn more about the new color tokens, check out our Color Guidelines. You can also learn more about concepts like layering here.\nFor teams that currently are using tokens from v10, rest assured that you can keep using these tokens in v11. In order to help the transition between tokens, we’ve created a compatibility theme in v11 that will allow teams to use the same tokens in components they’ve built today while progressively transitioning to newer tokens over time.\nLight & Dark mode\nAll of these updated color tokens are now shipped as CSS Custom Properties in v11. This technique makes it incredibly simple and performant to customize the theme of your product. We’re most excited about using this for Light & Dark Mode support in products.\n\nThis technique also can allow teams to customize a specific area of the page, a specific component, or other models within their product. The best part is that any component using our color tokens just works, regardless of the page or inline theme.\nTypography\nType tokens are being updated in v11 along with the changes to color tokens. These changes involve mostly name changes. The values and roles of these tokens remain the same between v10 and v11.\nTo learn more about the new type tokens in v11, check out our Typography Guidelines. If you’re curious about specific changes to tokens, take a look at our v11 Migration Docs.\nDesign Kits\nAll v11 changes — including type and color token name updates — have been made in our Sketch kits. The same Sketch Cloud libraries that were used in v10 have been updated to include the v11 changes. The v11 update is available like any other Sketch library update. We recommend that you do not accept the library update until you are ready to work with v11.\nThe v11 update for Figma is not yet available. We are waiting to make the v11 updates after some additional v10 enhancements have been completed. Like with Sketch, the same libraries used for v10 will be the same libraries used for v11. The targeted release date for Figma is the end of April. Along with the v11 release, we will also be releasing the Figma kits to the open community.\nNew packages\nCarbon v11 introduces new code packages to simplify how you bring Carbon into your project. For many teams, you may be installing several packages in order to use Carbon, including:\n\ncarbon-components\ncarbon-components-react\ncarbon-icons\n@carbon/icons-react\n\nStarting in v11, the styles, React components, and icons are all available under the @carbon/react package. Each of the packages above can still be downloaded individually but we brought them together to simplify bringing Carbon into your project.\nThe @carbon/styles package is also being introduced in v11. This package contains all of the Sass styles for our components and is being re-exported by @carbon/react. The Sass styles in this package have gone through a number of updates as we’ve shifted over to Dart Sass in order to improve our compile times by over 90%.\nDart Sass\nSass files in Carbon now require Dart Sass in order to compile. The decision to move towards Dart Sass was made after the announcement in the blog post, LibSass is deprecated. Like many of you who use Sass, we’ve relied heavily on LibSass through projects like node-sass. We would not be where we are today without all the hard work and effort that went into these projects 🙌\nSass Modules\nWith the transition to using sass, Carbon has updated its Sass files to leverage Sass Modules. This new module system was introduced in 2019 and we knew that it would be a great fit for the way Carbon authors and ships Sass files.\nThis new module system created an opportunity to simplify how you bring styles into your project from Carbon, while drastically reducing compile times. The best part is that you can still @import any of the files from Carbon if you would like, there is no requirement for you and your project to move to Sass Modules in order to benefit from these changes.\nCompile time improvements\nOne of the most common and frustrating challenges team can run into when using Carbon are long Sass compilation times. Parts of this were related to how Carbon was structured, other parts were related to toolchains, but overall we are incredibly excited to announce that we drastically improved the performance of compiling Carbon Sass files in v11.\nThrough moving to Dart Sass, migrating to Sass Modules, and changing our overall file structure we were able to achieve a 90% decrease in average recompilation times when using sass-loader along with a 60% reduction in initial build times.\nWe’re so excited to be able to ship this work in v11 and can’t wait to keep improving on these numbers so that your development feedback loop is as quick as possible.\nCSS Grid\nWe’re shipping a brand new way to incorporate the 2x Grid in code using a technique in CSS called CSS Grid. This implementation ships alongside our Flexbox-based grid that currently exists in v10 and we will continue to support both in v11.\nCSS Grid, along with CSS Custom Properties, makes it easier to build more resilient products on the Grid through CSS Grid-specific techniques or through new features that we’re able to bring like sub-grid for more complex products.\nIf you’re building on any of our Grid components in v10, every one of these will continue to be supported in v11. If you would like to learn more about how to use CSS Grid in your project, you can check out our documentation in React.\nReact Components\nWe’re shipping several new components in v11 to accompany the changes that we’re making to styles. Theming, layering, CSS Grid, and more are all available as components in our React library.\nWe’re also using this release to address some of the outstanding accessibility issues for components like Notification and Tooltip along with consistently applying how we name and define certain prop types in v11.\nTheming and Layering\nIn order to support the new theming features coming to v11, we’re shipping components like GlobalTheme and Theme to make it as easy as possible to change the theme of an entire page or a sub-section of a page. These components are paired alongside the useTheme hook to allow component authors to access the current theme for a given context.\nWe’re also introducing a new Layer component to simplify how layering is accomplished in v11. Previously, we used the light prop to address the layering needs for the white and g10 themes. Now, the Layer component can be used along with contextual tokens to implement layering across themes.\nGrid\nThe default grid in v11 is now implemented using CSS Grid. As a result, you’ll only need to use two components to build layouts on top of the 2x grid: Grid and Column. For teams that already have layouts built on the flexbox version of our grid components, rest assured you can update your code to use FlexGrid along with the existing Row and Column components and your layouts will continue to work as expected.\nAccessibility Updates\nIn order to ship accessible versions of some of our components, we’ve made updates or breaking changes to either change or remove inaccessible behavior.\nFor example, our Notification component no longer accepts interactive content as the semantics of this context would be stripped from users of Screen Readers. To better support common use cases of components where interactive content was needed, we are also shipping new components like ActionableNotification to offer a better, accessible experience for these use cases.\nTooltip, TooltipIcon, and TooltipDefinition are also receiving updates in v11 and mirror some of the changes seen in Notification. For example, Tooltips can now only contain interactive content. For situations that require interactive content, we are shipping a new component: Toggletip.\nChanges to icons\nOne of the largest changes that came to Carbon in v10 was the set of icons that we supported. This set grew tremendously due to the hard work of the brand team at IBM, and we went from supporting around 150 icons to over 1600 as a result.\nThe package size for these icons quickly ballooned as we shipped an export for each icon size. In v11, we decided to reduce the complexity of managing a package that large by shipping the icon as a component and customizing its size with the size prop.\nThis approach lead to a 75% decrease in the number of exports and files shipped through our @carbon/icons-react package and will make it easier to bring this package into your toolchain.\nChanges to component size\nSpeaking of size changes, we have updated the size prop for components in order to make sizing consistent across all of our components. Before, this prop would accept a variety of values like field, medium, and short. Now, this prop has the same names across components to make sizing clearer.\nYou can learn more about these changes here.\nWhat’s coming next\nThe Carbon team is so excited to finally bring all of these updates to you! 🥳 Our team is focusing on improving the migration experience from v10 to v11 and sharing more about all the new features coming in this release.\nFor teams still on v10, the Carbon team will continue to support these packages with bug fixes. There are also many items we wanted to see in v11 that didn’t quite make it. We are excited to bring those to you in Q2 2022.\nIf you have any questions or feedback for this release, feel free to reach out over on Slack or through GitHub Discussions!\nJosh Black is a Software Engineer based out of Austin, TX working on the Carbon Design System. The above article is personal and does not necessarily represent IBM’s positions, strategies, or opinions.\nQuestions or comments about Carbon? Reach out at carbon@us.ibm.com or tweet us @_carbondesign.\n\nCarbon v11 was originally published in _carbondesign on Medium, where people are continuing the conversation by highlighting and responding to this story.","dc:creator":"Josh Black","guid":"https://medium.com/p/72ace7fac01f","categories":["carbon-design-system","react","design-systems","sass"],"isoDate":"2022-03-31T20:18:09.000Z"},{"creator":"Abagail Hart","title":"Carbon v11 Release Candidate 1","link":"https://medium.com/carbondesign/carbon-v11-release-candidate-1-c3fa3ee01b08?source=rss----105693e8ddba---4","pubDate":"Thu, 03 Mar 2022 17:55:09 GMT","content:encoded":"<h4>The final release candidate for Carbon v11.</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZS6-qjXrmlfDZ6dfNlyy5g.jpeg\" /></figure><p>We’re psyched to announce the final release candidate for Carbon v11! 🥳</p><p>This release finalizes the majority of changes that teams can expect from this release. After the RC is released, our attention as a team is focusing on the experience of migrating to v11, including documentation and tooling, and addressing any issues that come up.</p><p>If you have the time to give us any feedback for this release candidate, we’d love to hear from you on <a href=\"https://github.com/carbon-design-system/carbon/discussions/10533\">GitHub Discussions</a>! It helps us ensure the stability of the final release.</p><p>To get started, check out our current draft for the official <a href=\"https://v11.carbondesignsystem.com/migrating/guide/overview/\">Migration Guide</a>.</p><h3>What is a Release Candidate?</h3><p>This release candidate is a preview of the official release for v11. It encapsulates the majority of the changes we are anticipating making to the design system and provides a space for teams to preview and offer feedback before the stable release.</p><p>Our hope with this release candidate is to offer as stable of a release as we can. Through getting feedback from you all, we can create the advantage of surfacing serious bugs and fixing them before officially releasing. We can also begin coordinating the broader ecosystem rollout of these changes with more confidence.</p><p>With this release candidate, we’re hoping to get as close as we can to a stable v11 release that optimizes for ease of migration for product teams.</p><h3>What’s new in design?</h3><p>We released the Carbon Figma kit with our four color themes as well as the IBM Design Language libraries for Icons, Pictograms, Colors, and Text styles. All 32 of Carbon’s core library components and elements are available to use.</p><p>The Figma kit is currently only available to IBMers through a private Figma organization. We are working on getting the kit added to the Figma open community and expect it to be published at the end of Q1 for external use.</p><p>Here’s the <a href=\"https://www.carbondesignsystem.com/designing/kits/figma\">Carbon Figma kit</a>, if you would like to check it out!</p><h3>What are we focusing on next?</h3><p>As we move into the release candidate phase for v11, our team’s attention is shifting from feature development to stabilizing the release. This work includes:</p><ul><li>Addressing issues that come up from our release candidate</li><li>Creating and updating migration material</li><li>Creating and updating usage documentation for components that have changed</li></ul><p>We will also continue to support the v10 release during this time.</p><h3>What’s coming next</h3><p>This will be our final Release Candidate for v11. The goal is for this release candidate to be the final preview before our stable release in March. You can expect this release to be out in early March.</p><p>If you’d like to help us out along the way, please try out the release and let us know how it’s going! Any feedback in our <a href=\"https://github.com/carbon-design-system/carbon/discussions/10820\">v11 Release Candidate 1 Discussion</a> on Github would be greatly appreciated! Otherwise, be on the lookout for our first release candidate this month 🚀.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c3fa3ee01b08\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/carbondesign/carbon-v11-release-candidate-1-c3fa3ee01b08\">Carbon v11 Release Candidate 1</a> was originally published in <a href=\"https://medium.com/carbondesign\">_carbondesign</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","content:encodedSnippet":"The final release candidate for Carbon v11.\n\nWe’re psyched to announce the final release candidate for Carbon v11! 🥳\nThis release finalizes the majority of changes that teams can expect from this release. After the RC is released, our attention as a team is focusing on the experience of migrating to v11, including documentation and tooling, and addressing any issues that come up.\nIf you have the time to give us any feedback for this release candidate, we’d love to hear from you on GitHub Discussions! It helps us ensure the stability of the final release.\nTo get started, check out our current draft for the official Migration Guide.\nWhat is a Release Candidate?\nThis release candidate is a preview of the official release for v11. It encapsulates the majority of the changes we are anticipating making to the design system and provides a space for teams to preview and offer feedback before the stable release.\nOur hope with this release candidate is to offer as stable of a release as we can. Through getting feedback from you all, we can create the advantage of surfacing serious bugs and fixing them before officially releasing. We can also begin coordinating the broader ecosystem rollout of these changes with more confidence.\nWith this release candidate, we’re hoping to get as close as we can to a stable v11 release that optimizes for ease of migration for product teams.\nWhat’s new in design?\nWe released the Carbon Figma kit with our four color themes as well as the IBM Design Language libraries for Icons, Pictograms, Colors, and Text styles. All 32 of Carbon’s core library components and elements are available to use.\nThe Figma kit is currently only available to IBMers through a private Figma organization. We are working on getting the kit added to the Figma open community and expect it to be published at the end of Q1 for external use.\nHere’s the Carbon Figma kit, if you would like to check it out!\nWhat are we focusing on next?\nAs we move into the release candidate phase for v11, our team’s attention is shifting from feature development to stabilizing the release. This work includes:\n\nAddressing issues that come up from our release candidate\nCreating and updating migration material\nCreating and updating usage documentation for components that have changed\n\nWe will also continue to support the v10 release during this time.\nWhat’s coming next\nThis will be our final Release Candidate for v11. The goal is for this release candidate to be the final preview before our stable release in March. You can expect this release to be out in early March.\nIf you’d like to help us out along the way, please try out the release and let us know how it’s going! Any feedback in our v11 Release Candidate 1 Discussion on Github would be greatly appreciated! Otherwise, be on the lookout for our first release candidate this month 🚀.\n\nCarbon v11 Release Candidate 1 was originally published in _carbondesign on Medium, where people are continuing the conversation by highlighting and responding to this story.","dc:creator":"Abagail Hart","guid":"https://medium.com/p/c3fa3ee01b08","categories":["carbon-design-system"],"isoDate":"2022-03-03T17:55:09.000Z"},{"creator":"Dan Silveira","title":"IBM’s Mid-Fi Carbon Design Kit","link":"https://medium.com/carbondesign/ibms-mid-fi-carbon-design-kit-d8c60763c50e?source=rss----105693e8ddba---4","pubDate":"Wed, 16 Feb 2022 21:51:22 GMT","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hkFf7wN3Zzu--3kzDQHK_w.png\" /><figcaption>Banner Image designed by Thy Do</figcaption></figure><p>The software development environment is one that is fast-paced and agile. The speed and flexibility the agile methodology provides us with not only improves the rate at which we can deliver the latest version of our product, but is also meant to provide our users with the greatest value. Pair this with one of UX design’s greatest allies, the design system, we can go from a conceptual idea to an interactive prototype in record time.</p><p>With all these tools and methodologies promoting speed and efficiency, the question begs to be asked, are we sacrificing the initial and most important stages of our design process to get things out the door as quickly as possible? Are we becoming complacent designers, creating only high-fidelity designs and forgetting the benefits of testing in a lower fidelity?</p><p>The Mid-Fi Carbon Design Kit was built to avoid these issues, providing designers with a way to visualize a concept and test them out before committing to the specific components, elements, and colors available in a high-fidelity design system. It also proves beneficial in user research sessions to focus on key aspects of a flow or layout to gain useful data that can be incorporated in those high fidelity designs.</p><p><strong>Why Mid-Fi and not Low-fi?</strong></p><p>When looking at the Mid-Fi kit, some may immediately ask why not make a low-fidelity kit? If the purpose of the kit itself is to encourage testing early conceptual work, why not provide a kit that allows designers to work in as low fidelity as possible? The reason for a Mid-Fi kit over a Low-fi kit is to avoid resulting in a similar issue we sought to solve, to begin with.</p><p>Design should always begin in its lowest fidelity, using paper and pen. This is the cheapest and least time-consuming method to begin your design work. It encourages rapid but thoughtful iterations where designers can quickly articulate an idea and immediately get feedback from both stakeholders and users, which they can then leverage the mid-fidelity kit to then prototype and continue testing.</p><p><strong>Introducing the Mid-Fi Carbon Design Kit</strong></p><p>The Mid-Fi kit was designed with speed and efficiency in mind, allowing designers to quickly convert their mid-fidelity components to high-fidelity with a click of a button, once the design has been validated with users.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/514/1*3nIfJzfGa0GeSOfyb3QmnA.gif\" /><figcaption>Switching between a Mid-fi Component to High-FI using Sketch</figcaption></figure><p>In this version of the Carbon kit, we have removed all colors and icons to provide a non-distracting and simplistic style for your design. By eliminating these high-fidelity design elements, we can better develop our conceptual designs to focus on the key problems and pain points we aim to resolve.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dTfA6DXLW312m8ZNP9sPhQ.png\" /><figcaption>Example of Mid-Fi components next to their High-Fi counterparts</figcaption></figure><p>Finally, we have reduced the number of potential components to choose from to try to deter designers from getting too complicated with their initial design work. If you’re interested in designing with lower fidelity, you can now find and download the current version of the Mid-Fi Carbon Design kit on the Carbon Design website.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d8c60763c50e\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/carbondesign/ibms-mid-fi-carbon-design-kit-d8c60763c50e\">IBM’s Mid-Fi Carbon Design Kit</a> was originally published in <a href=\"https://medium.com/carbondesign\">_carbondesign</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","content:encodedSnippet":"Banner Image designed by Thy Do\nThe software development environment is one that is fast-paced and agile. The speed and flexibility the agile methodology provides us with not only improves the rate at which we can deliver the latest version of our product, but is also meant to provide our users with the greatest value. Pair this with one of UX design’s greatest allies, the design system, we can go from a conceptual idea to an interactive prototype in record time.\nWith all these tools and methodologies promoting speed and efficiency, the question begs to be asked, are we sacrificing the initial and most important stages of our design process to get things out the door as quickly as possible? Are we becoming complacent designers, creating only high-fidelity designs and forgetting the benefits of testing in a lower fidelity?\nThe Mid-Fi Carbon Design Kit was built to avoid these issues, providing designers with a way to visualize a concept and test them out before committing to the specific components, elements, and colors available in a high-fidelity design system. It also proves beneficial in user research sessions to focus on key aspects of a flow or layout to gain useful data that can be incorporated in those high fidelity designs.\nWhy Mid-Fi and not Low-fi?\nWhen looking at the Mid-Fi kit, some may immediately ask why not make a low-fidelity kit? If the purpose of the kit itself is to encourage testing early conceptual work, why not provide a kit that allows designers to work in as low fidelity as possible? The reason for a Mid-Fi kit over a Low-fi kit is to avoid resulting in a similar issue we sought to solve, to begin with.\nDesign should always begin in its lowest fidelity, using paper and pen. This is the cheapest and least time-consuming method to begin your design work. It encourages rapid but thoughtful iterations where designers can quickly articulate an idea and immediately get feedback from both stakeholders and users, which they can then leverage the mid-fidelity kit to then prototype and continue testing.\nIntroducing the Mid-Fi Carbon Design Kit\nThe Mid-Fi kit was designed with speed and efficiency in mind, allowing designers to quickly convert their mid-fidelity components to high-fidelity with a click of a button, once the design has been validated with users.\nSwitching between a Mid-fi Component to High-FI using Sketch\nIn this version of the Carbon kit, we have removed all colors and icons to provide a non-distracting and simplistic style for your design. By eliminating these high-fidelity design elements, we can better develop our conceptual designs to focus on the key problems and pain points we aim to resolve.\nExample of Mid-Fi components next to their High-Fi counterparts\nFinally, we have reduced the number of potential components to choose from to try to deter designers from getting too complicated with their initial design work. If you’re interested in designing with lower fidelity, you can now find and download the current version of the Mid-Fi Carbon Design kit on the Carbon Design website.\n\nIBM’s Mid-Fi Carbon Design Kit was originally published in _carbondesign on Medium, where people are continuing the conversation by highlighting and responding to this story.","dc:creator":"Dan Silveira","guid":"https://medium.com/p/d8c60763c50e","categories":["ui-design","ibm","design-systems","ux-design","carbon-design-system"],"isoDate":"2022-02-16T21:51:22.000Z"},{"creator":"Putra Bonaccorsi","title":"Deploy a shared navigational experience across multiple content ecosystems within ibm.com/cloud","link":"https://medium.com/carbondesign/deploy-a-shared-navigational-experience-across-multiple-content-ecosystems-within-ibm-com-cloud-522162282aa3?source=rss----105693e8ddba---4","pubDate":"Fri, 21 Jan 2022 16:02:49 GMT","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gpTtUbUxP6txMkRXVKNMRw.png\" /></figure><p>IBM.com is a massive web experience developed and managed by different teams, powered by technology ranging from standalone JavaScript applications to monolithic content management systems (Adobe Experience Manager, Drupal, etc). One thing they have in common: a masthead and navigation, shared with little to no duplication in code.</p><p>In this article, we’ll talk about the efforts to coordinate teams working on products across organizations to build and deploy a first-of-its-kind “IBM Cloud” brand-specific masthead component that creates a truly shared navigation experience across multiple content ecosystems.</p><h3>Visual and functional consistency issues</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*SPdaY9oacPCklrt5.jpg\" /><figcaption>Design specification of the new Cloud Masthead component.</figcaption></figure><p>Maintaining a consistent interface across your app enables users to feel at ease and allows them to quickly navigate their way through your product to accomplish their tasks without being confused.</p><p>With that in mind, we started by looking for common UI/UX pitfalls our teams were encountering across their products. The masthead is the topmost element of any application and is displayed on all screens, providing a navigational tool for users to explore and advance through different sections of the site. We found that although the Cloud Masthead looked somewhat consistent between different content ecosystems there were inconsistencies within the functionality and content.</p><p>Because of those inconsistencies, we decided the masthead would be a strong component to use to implement a unified branding experience across all applications running under the <strong>ibm.com/cloud</strong> domain name.</p><p><strong>The key goals to our unified Cloud Masthead are:</strong></p><ul><li>Eliminate UI/UX inconsistencies within the current IBM Cloud content ecosystems by designing a unified masthead component.</li><li>The masthead component must be easily consumable in different publishing ecosystems (eg. Drupal, AEM, React, etc).</li><li>Create a centralized storage system that can be used to update and deploy content changes while keeping them visually consistent.</li></ul><h3>Adopting Carbon for IBM.com library</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*X1Mc5M12SHIjeRlM.jpg\" /><figcaption>A screenshot of the Carbon for IBM.com library homepage.</figcaption></figure><p>Our team tries to reuse code as much as possible. This can be difficult even in the best of circumstances, but especially within a diverse company using different frameworks like React, Vue, and Angular.</p><p><strong>We asked ourselves tough questions such as:</strong></p><ul><li>How do we develop components independently, while avoiding the overhead of too many repositories?</li><li>How do we version and publish components?</li><li>How can we help other people in the company discover and adopt the components we build?</li></ul><p>Our solution to these questions was to use the <a href=\"https://www.ibm.com/standards/carbon/\">Carbon for IBM.com</a> suite of component patterns. The suite utilizes <strong>Web Components</strong>, housed under an open-sourced <a href=\"https://github.com/carbon-design-system/carbon-for-ibm-dotcom\">monorepo</a>, in order to manage the multiple packages in unison (see <a href=\"https://medium.com/carbondesign/automating-a-design-system-69bd2414f75\">Automating a Design System</a>).</p><p>Web Components is an emerging web standard that allows us to create framework-agnostic components that are reusable with encapsulated inside HTML tags that can be shared between frameworks. With the release and rapid adoption of Carbon for IBM.com Library, we’re able to leverage the Carbon Web Components library (<a href=\"https://github.com/carbon-design-system/carbon-for-ibm-dotcom/tree/main/packages/web-components\">carbon-web-components</a> package) under the hood and can build on top of the available UI components. <a href=\"https://carbondesignsystem.com/developing/frameworks/web-components\">Learn more about Carbon Web Components</a>.</p><h3>Menu content translation management</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*jNXq8iXPYnYPykq2.jpg\" /><figcaption>A screenshot of the JSON data output used for delivering content to the masthead.</figcaption></figure><p>Once we had our masthead component housed within the <a href=\"https://github.com/carbon-design-system/carbon-for-ibm-dotcom\">Carbon for IBM.com monorepo</a> we needed to ensure that Content Editors could update the masthead content and have their changes reflected and deployed uniformly across all of our different content ecosystems.</p><p>To accomplish this, we leveraged the content repository that is the storage content engine for all of the mastheads used within IBM.com. Updates to the repository are automatically published via an internal IBM Jenkins server (Read more about <a href=\"https://medium.com/carbondesign/automating-a-design-system-69bd2414f75\">IBM.com testing and delivery</a>). Once an edit has been published and a new API endpoint build is triggered, the latest version becomes available and is fetched by our web component masthead.</p><h3>Building on top of the existing Masthead component</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*bBc4w4eidx1UY0gu.jpg\" /><figcaption>A screenshot of what the global masthead component looks like within the Storybook preview available within the Carbon for IBM.com library.</figcaption></figure><p>Carbon for IBM.com already offers a <a href=\"https://www.ibm.com/standards/carbon/components/masthead\">Masthead component</a> built-in with Level 0, which refers to the first position of navigational menus on a page. This masthead houses global elements and navigation labels for the main/global navigational pieces. However, to achieve the new masthead to cater to Cloud products, we extended the Carbon for IBM.com global masthead component to create a new variant that’s designed for the Cloud business branding. This new component leverages all of the baseline global masthead design and functionality with some modifications and enhancements that are Cloud brand-specific.</p><p>By extending Carbon for IBM.com’s global masthead, we were able to build the masthead with established logic in place instead of starting from scratch. That being said, the global masthead is not for the faint of heart; it’s a complex component with dependencies on several APIs (locale, translations, profile, etc.). On top of that, web components is still a relatively new technology that can take some time to ramp upon. Nonetheless, through the collaboration process between teams and stakeholders, we were able to develop an encapsulated masthead and integrated/launch across multiple content ecosystems.</p><h3>Shared Cloud Masthead in the “Cloud”</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*jiKgLPQpDsXPYPMp.jpg\" /><figcaption>A collage of images depicting the desktop and mobile versions of the Cloud Masthead used on different platforms like Adobe Experience Manager, Drupal, React, etc.</figcaption></figure><p>Due to the number of applications and content management systems we needed to launch the new masthead on, we needed to come up with a scalable solution that takes all the files and dependencies of the new Cloud Masthead web components and packs/uploads them to a remote cloud service. That meant no local repo cloning and no complex front-end bundling setup. With this in mind, we decided to leverage the existing Carbon for IBM.com’s CDN auto-publishing workflow that’s made available when a new release is out.</p><p>Using the new masthead is simple. Various standalone applications can call for the component and access its built static files using the following snippet:</p><pre>&lt;script src=&quot;../carbon-for-ibm-dotcom/tag/v1/latest/cloud-masthead.min.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;</pre><pre>&lt;dds-cloud-masthead-container<br>   platform=&quot;Cloud&quot;<br>   data-endpoint=&quot;/&quot;&gt;<br>&lt;/dds-cloud-masthead-container&gt;</pre><p><strong>Conclusion</strong></p><p>With the unified Cloud Masthead project, we were able to prove that it’s possible to speed up the development of future projects by sharing components between them and to be able to deploy content changes that will be reflected across different frameworks/content ecosystems.</p><p>Since the launch of the unified Cloud Masthead in the last 6 months, we have received traffic of more than 8 million page loads globally and 650k active monthly users.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=522162282aa3\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/carbondesign/deploy-a-shared-navigational-experience-across-multiple-content-ecosystems-within-ibm-com-cloud-522162282aa3\">Deploy a shared navigational experience across multiple content ecosystems within ibm.com/cloud</a> was originally published in <a href=\"https://medium.com/carbondesign\">_carbondesign</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","content:encodedSnippet":"IBM.com is a massive web experience developed and managed by different teams, powered by technology ranging from standalone JavaScript applications to monolithic content management systems (Adobe Experience Manager, Drupal, etc). One thing they have in common: a masthead and navigation, shared with little to no duplication in code.\nIn this article, we’ll talk about the efforts to coordinate teams working on products across organizations to build and deploy a first-of-its-kind “IBM Cloud” brand-specific masthead component that creates a truly shared navigation experience across multiple content ecosystems.\nVisual and functional consistency issues\nDesign specification of the new Cloud Masthead component.\nMaintaining a consistent interface across your app enables users to feel at ease and allows them to quickly navigate their way through your product to accomplish their tasks without being confused.\nWith that in mind, we started by looking for common UI/UX pitfalls our teams were encountering across their products. The masthead is the topmost element of any application and is displayed on all screens, providing a navigational tool for users to explore and advance through different sections of the site. We found that although the Cloud Masthead looked somewhat consistent between different content ecosystems there were inconsistencies within the functionality and content.\nBecause of those inconsistencies, we decided the masthead would be a strong component to use to implement a unified branding experience across all applications running under the ibm.com/cloud domain name.\nThe key goals to our unified Cloud Masthead are:\n\nEliminate UI/UX inconsistencies within the current IBM Cloud content ecosystems by designing a unified masthead component.\nThe masthead component must be easily consumable in different publishing ecosystems (eg. Drupal, AEM, React, etc).\nCreate a centralized storage system that can be used to update and deploy content changes while keeping them visually consistent.\n\nAdopting Carbon for IBM.com library\nA screenshot of the Carbon for IBM.com library homepage.\nOur team tries to reuse code as much as possible. This can be difficult even in the best of circumstances, but especially within a diverse company using different frameworks like React, Vue, and Angular.\nWe asked ourselves tough questions such as:\n\nHow do we develop components independently, while avoiding the overhead of too many repositories?\nHow do we version and publish components?\nHow can we help other people in the company discover and adopt the components we build?\n\nOur solution to these questions was to use the Carbon for IBM.com suite of component patterns. The suite utilizes Web Components, housed under an open-sourced monorepo, in order to manage the multiple packages in unison (see Automating a Design System).\nWeb Components is an emerging web standard that allows us to create framework-agnostic components that are reusable with encapsulated inside HTML tags that can be shared between frameworks. With the release and rapid adoption of Carbon for IBM.com Library, we’re able to leverage the Carbon Web Components library (carbon-web-components package) under the hood and can build on top of the available UI components. Learn more about Carbon Web Components.\nMenu content translation management\nA screenshot of the JSON data output used for delivering content to the masthead.\nOnce we had our masthead component housed within the Carbon for IBM.com monorepo we needed to ensure that Content Editors could update the masthead content and have their changes reflected and deployed uniformly across all of our different content ecosystems.\nTo accomplish this, we leveraged the content repository that is the storage content engine for all of the mastheads used within IBM.com. Updates to the repository are automatically published via an internal IBM Jenkins server (Read more about IBM.com testing and delivery). Once an edit has been published and a new API endpoint build is triggered, the latest version becomes available and is fetched by our web component masthead.\nBuilding on top of the existing Masthead component\nA screenshot of what the global masthead component looks like within the Storybook preview available within the Carbon for IBM.com library.\nCarbon for IBM.com already offers a Masthead component built-in with Level 0, which refers to the first position of navigational menus on a page. This masthead houses global elements and navigation labels for the main/global navigational pieces. However, to achieve the new masthead to cater to Cloud products, we extended the Carbon for IBM.com global masthead component to create a new variant that’s designed for the Cloud business branding. This new component leverages all of the baseline global masthead design and functionality with some modifications and enhancements that are Cloud brand-specific.\nBy extending Carbon for IBM.com’s global masthead, we were able to build the masthead with established logic in place instead of starting from scratch. That being said, the global masthead is not for the faint of heart; it’s a complex component with dependencies on several APIs (locale, translations, profile, etc.). On top of that, web components is still a relatively new technology that can take some time to ramp upon. Nonetheless, through the collaboration process between teams and stakeholders, we were able to develop an encapsulated masthead and integrated/launch across multiple content ecosystems.\nShared Cloud Masthead in the “Cloud”\nA collage of images depicting the desktop and mobile versions of the Cloud Masthead used on different platforms like Adobe Experience Manager, Drupal, React, etc.\nDue to the number of applications and content management systems we needed to launch the new masthead on, we needed to come up with a scalable solution that takes all the files and dependencies of the new Cloud Masthead web components and packs/uploads them to a remote cloud service. That meant no local repo cloning and no complex front-end bundling setup. With this in mind, we decided to leverage the existing Carbon for IBM.com’s CDN auto-publishing workflow that’s made available when a new release is out.\nUsing the new masthead is simple. Various standalone applications can call for the component and access its built static files using the following snippet:\n<script src=\"../carbon-for-ibm-dotcom/tag/v1/latest/cloud-masthead.min.js\" type=\"module\"></script>\n<dds-cloud-masthead-container\n   platform=\"Cloud\"\n   data-endpoint=\"/\">\n</dds-cloud-masthead-container>\nConclusion\nWith the unified Cloud Masthead project, we were able to prove that it’s possible to speed up the development of future projects by sharing components between them and to be able to deploy content changes that will be reflected across different frameworks/content ecosystems.\nSince the launch of the unified Cloud Masthead in the last 6 months, we have received traffic of more than 8 million page loads globally and 650k active monthly users.\n\nDeploy a shared navigational experience across multiple content ecosystems within ibm.com/cloud was originally published in _carbondesign on Medium, where people are continuing the conversation by highlighting and responding to this story.","dc:creator":"Putra Bonaccorsi","guid":"https://medium.com/p/522162282aa3","categories":["ibm-cloud","carbon","masthead","component-libraries","web-components"],"isoDate":"2022-01-21T16:02:49.000Z"},{"creator":"Jan Child","title":"Styling strategies using typography","link":"https://medium.com/carbondesign/styling-strategies-using-typography-1f6b7df22169?source=rss----105693e8ddba---4","pubDate":"Tue, 04 Jan 2022 17:33:21 GMT","content:encoded":"<h4>IBM designers combine Carbon’s productive and expressive type styles to bring hierarchy and clarity to product and web pages.</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*emCPAnvA_RlNw1ZM_A4ngA.png\" /></figure><h3>Overview</h3><p>Carbon Design System uses type tokens to manage typography, and these tokens sit within two type sets: <em>productive</em> and <em>expressive.</em> These type sets support designers creating for a full range of user needs and activities across product and web pages.</p><p>Traditionally we reserved the use of productive type styles for product pages, and the expressive, more editorial type styles for IBM.com website pages. However, there are opportunities in each of these experiences to blend type styles and use the contrast between the two type sets to create hierarchies and distinction between sections, thereby controlling the focus. With the use of tactical “moments”, you can better support a particular use case and elevate the overall experience.</p><p>Let’s look at the respective design rationales for each experience, and then see where it makes sense to provide a blend.</p><h3>Expressive use cases</h3><p>Carbon for IBM.com is for the creators of IBM.com pages and it provides components, along with typography guidelines, that support expressive use cases.</p><h4>When to use expressive type styles</h4><p>The key drivers for the use of expressive type styles are:</p><ul><li>Users are trying to learn and explore, and are primarily scanning and reading.</li><li>Interactions are more passive through impactful imagery, layout, and long form reading.</li><li>Users typically traverse a series of pages during one session.</li><li>Key performance indicators consider success in terms of click-through rates and final purchases.</li></ul><p>Given these considerations, larger type sizes and a more editorial approach allows users to scan, read, and navigate multiple pages with comfort and ease.</p><h4>Styles for expressive moments</h4><p>Within the Carbon type sets, the expressive body and supporting styles use the 02 suffix. There are also two fixed headings, as well as fluid headings that will adjust with different breakpoints.</p><h3>Productive use cases</h3><p>Carbon Design System started as the design system for Cloud console and provides typography that supports productive use cases.</p><h4>When to use productive type styles</h4><p>The key drivers for the use of productive type styles are:</p><ul><li>Users are focused on getting a specific job done.</li><li>Interactions are more active, through inputs, forms, and controls.</li><li>Users are embedded within the experience, often on one page, for awhile.</li><li>Key performance indicators consider success in terms of time needed to complete a task and also the abandonment rate.</li></ul><p>Given these considerations, space efficiency is key. Keeping content condensed is helpful to support focus on complex tasks.</p><h4>Styles for productive moments</h4><p>Within the Carbon type sets, the productive body and supporting styles use the 01 suffix, along with fixed headings.</p><p>All productive headings are designed to work inside containers and so they are fixed, which means they do not adjust size across different breakpoints.</p><h3>Blending type sets</h3><p>The spaces we are designing for are no longer neatly divided between productive and expressive. Product and web pages can be blended to great effect with what we call “moments” if the alternative type set better supports the function.</p><p>If your users are working in a product but pausing to read or scan for options, an expressive moment can facilitate easy reading and/or create a desired impact or pause. In these cases, however the “moment” would span a full page or banner where there are no containers.</p><p>If your users are reading on the website but then switch to a focused task within the web experience, using productive styles within that moment would facilitate the focus required for an interactive task such as filling out a form.</p><h3>Using productive moments within IBM.com pages</h3><p>Here are some moments where Carbon for IBM.com designers use productive moments:</p><ul><li>The global masthead mega menu</li><li>IBM.com search</li><li>Commerce</li><li>Product configuration</li><li>Account creation</li><li>Filter panel in catalogs</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BXNQed44Jbov83w9YfCJxA.png\" /><figcaption>The mega menu with the more compact productive type styles allows users to see the full range of offerings.</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1TyYlHAaIFFcv6b2kVArdA.png\" /><figcaption>Using productive type styles on tabs provides a distinction in scale. It creates a hierarchy that keeps focus on the results.</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YovSuDxFgXH40cNFVohhvA.png\" /><figcaption>The account creation form with expressive type on the left, and productive type for the form interactions on the right. It shows how both type styles can work side by side.</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iltkmZ5ydqfT45Fdpo7sDA.png\" /><figcaption>Juxtaposing productive type within an expressive page is a useful tactic for creating a setback or a hierarchy.</figcaption></figure><h3>Using expressive moments within product designs</h3><p>The productive experience is all about keeping the user focused on completing more complex tasks, therefore the areas where expressive moments can be used are less common. However, when the user is first entering the product, or moving to another area of the product you may find opportunities.</p><p>For expressive moments, you are looking for areas where the page opens up and the content is not restricted to a container, card, or data table. Home pages and page headers or banners are two possibilities.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OQxqCr6Nvw6lSwAvEzzaoQ.png\" /><figcaption>A product home page provides an opportunity to create both visual interest, distinction, and hierarchy with a blend of expressive and productive type styles.</figcaption></figure><h3>Tips and techniques</h3><h4>Use a blend of the two sets to establish distinctions and create hierarchies</h4><p>You can use the two type sets to provide contrast and hierarchy between two areas. For example, a filter panel using productive type becomes less prominent next to a list of results using expressive type styles. By pushing the functional elements into the background, items of user interest take the focus.</p><h4>Match and support user tasks</h4><p>Within each type set, there are appropriately sized type styles for each user task. Follow the use case definitions for expressive and productive moments to determine when it’s appropriate to use each type set.</p><p><em>When users need to focus on a task</em> and are interacting through inputs, forms, and controls, use the productive type set.</p><p><em>When users are learning and exploring,</em> and interacting through impactful imagery, layout, and long form reading, pull from the expressive type set.</p><h4>Keep type styles consistent within a discrete task, component, or region</h4><p>People unconsciously use type size as a signal of hierarchy, and each type set has been designed with expectations about hierarchy in mind. Mixing type styles within a component could jumble the hierarchy and create confusion.</p><h3>What’s next?</h3><p>As part of this work, the design system team has also streamlined the type token names for ease of use, and these new tokens will be available in the next major release.</p><p>Most of all, we’re excited to see where teams take their designs next with these new styling strategies!</p><p><em>Many thanks to </em><a href=\"https://medium.com/u/48e9f944c375\"><em>Mike Abbink</em></a>, <a href=\"https://medium.com/u/3a6e2b0e1cfa\"><em>Shixie</em></a><em> Shi Trofimov</em>, <em>and @oliviarflory for their assistance with this story.</em></p><p><em>The</em> <a href=\"https://www.carbondesignsystem.com/\"><em>Carbon Design System</em></a><em> and </em><a href=\"https://www.ibm.com/standards/carbon/\"><em>Carbon for IBM.com</em></a><em> are part of IBM’s open source design system offering styles, components, patterns, and guidelines for anyone building products and web pages.</em></p><p><em>Questions or comments about Carbon? Reach out at </em><a href=\"mailto:carbon@us.ibm.com\"><em>carbon@us.ibm.com</em></a><em> or tweet us @_carbondesign.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1f6b7df22169\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/carbondesign/styling-strategies-using-typography-1f6b7df22169\">Styling strategies using typography</a> was originally published in <a href=\"https://medium.com/carbondesign\">_carbondesign</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","content:encodedSnippet":"IBM designers combine Carbon’s productive and expressive type styles to bring hierarchy and clarity to product and web pages.\n\nOverview\nCarbon Design System uses type tokens to manage typography, and these tokens sit within two type sets: productive and expressive. These type sets support designers creating for a full range of user needs and activities across product and web pages.\nTraditionally we reserved the use of productive type styles for product pages, and the expressive, more editorial type styles for IBM.com website pages. However, there are opportunities in each of these experiences to blend type styles and use the contrast between the two type sets to create hierarchies and distinction between sections, thereby controlling the focus. With the use of tactical “moments”, you can better support a particular use case and elevate the overall experience.\nLet’s look at the respective design rationales for each experience, and then see where it makes sense to provide a blend.\nExpressive use cases\nCarbon for IBM.com is for the creators of IBM.com pages and it provides components, along with typography guidelines, that support expressive use cases.\nWhen to use expressive type styles\nThe key drivers for the use of expressive type styles are:\n\nUsers are trying to learn and explore, and are primarily scanning and reading.\nInteractions are more passive through impactful imagery, layout, and long form reading.\nUsers typically traverse a series of pages during one session.\nKey performance indicators consider success in terms of click-through rates and final purchases.\n\nGiven these considerations, larger type sizes and a more editorial approach allows users to scan, read, and navigate multiple pages with comfort and ease.\nStyles for expressive moments\nWithin the Carbon type sets, the expressive body and supporting styles use the 02 suffix. There are also two fixed headings, as well as fluid headings that will adjust with different breakpoints.\nProductive use cases\nCarbon Design System started as the design system for Cloud console and provides typography that supports productive use cases.\nWhen to use productive type styles\nThe key drivers for the use of productive type styles are:\n\nUsers are focused on getting a specific job done.\nInteractions are more active, through inputs, forms, and controls.\nUsers are embedded within the experience, often on one page, for awhile.\nKey performance indicators consider success in terms of time needed to complete a task and also the abandonment rate.\n\nGiven these considerations, space efficiency is key. Keeping content condensed is helpful to support focus on complex tasks.\nStyles for productive moments\nWithin the Carbon type sets, the productive body and supporting styles use the 01 suffix, along with fixed headings.\nAll productive headings are designed to work inside containers and so they are fixed, which means they do not adjust size across different breakpoints.\nBlending type sets\nThe spaces we are designing for are no longer neatly divided between productive and expressive. Product and web pages can be blended to great effect with what we call “moments” if the alternative type set better supports the function.\nIf your users are working in a product but pausing to read or scan for options, an expressive moment can facilitate easy reading and/or create a desired impact or pause. In these cases, however the “moment” would span a full page or banner where there are no containers.\nIf your users are reading on the website but then switch to a focused task within the web experience, using productive styles within that moment would facilitate the focus required for an interactive task such as filling out a form.\nUsing productive moments within IBM.com pages\nHere are some moments where Carbon for IBM.com designers use productive moments:\n\nThe global masthead mega menu\nIBM.com search\nCommerce\nProduct configuration\nAccount creation\nFilter panel in catalogs\nThe mega menu with the more compact productive type styles allows users to see the full range of offerings.Using productive type styles on tabs provides a distinction in scale. It creates a hierarchy that keeps focus on the results.The account creation form with expressive type on the left, and productive type for the form interactions on the right. It shows how both type styles can work side by side.Juxtaposing productive type within an expressive page is a useful tactic for creating a setback or a hierarchy.\nUsing expressive moments within product designs\nThe productive experience is all about keeping the user focused on completing more complex tasks, therefore the areas where expressive moments can be used are less common. However, when the user is first entering the product, or moving to another area of the product you may find opportunities.\nFor expressive moments, you are looking for areas where the page opens up and the content is not restricted to a container, card, or data table. Home pages and page headers or banners are two possibilities.\nA product home page provides an opportunity to create both visual interest, distinction, and hierarchy with a blend of expressive and productive type styles.\nTips and techniques\nUse a blend of the two sets to establish distinctions and create hierarchies\nYou can use the two type sets to provide contrast and hierarchy between two areas. For example, a filter panel using productive type becomes less prominent next to a list of results using expressive type styles. By pushing the functional elements into the background, items of user interest take the focus.\nMatch and support user tasks\nWithin each type set, there are appropriately sized type styles for each user task. Follow the use case definitions for expressive and productive moments to determine when it’s appropriate to use each type set.\nWhen users need to focus on a task and are interacting through inputs, forms, and controls, use the productive type set.\nWhen users are learning and exploring, and interacting through impactful imagery, layout, and long form reading, pull from the expressive type set.\nKeep type styles consistent within a discrete task, component, or region\nPeople unconsciously use type size as a signal of hierarchy, and each type set has been designed with expectations about hierarchy in mind. Mixing type styles within a component could jumble the hierarchy and create confusion.\nWhat’s next?\nAs part of this work, the design system team has also streamlined the type token names for ease of use, and these new tokens will be available in the next major release.\nMost of all, we’re excited to see where teams take their designs next with these new styling strategies!\nMany thanks to Mike Abbink, Shixie Shi Trofimov, and @oliviarflory for their assistance with this story.\nThe Carbon Design System and Carbon for IBM.com are part of IBM’s open source design system offering styles, components, patterns, and guidelines for anyone building products and web pages.\nQuestions or comments about Carbon? Reach out at carbon@us.ibm.com or tweet us @_carbondesign.\n\nStyling strategies using typography was originally published in _carbondesign on Medium, where people are continuing the conversation by highlighting and responding to this story.","dc:creator":"Jan Child","guid":"https://medium.com/p/1f6b7df22169","categories":["typography","ibm","carbon-design-system","ux","design-systems"],"isoDate":"2022-01-04T17:33:21.000Z"},{"creator":"Josh Black","title":"Carbon v11 Beta 3","link":"https://medium.com/carbondesign/carbon-v11-beta-3-9b6be61bb2af?source=rss----105693e8ddba---4","pubDate":"Fri, 10 Dec 2021 18:05:01 GMT","content:encoded":"<h4>The final beta release for v11</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ovQzYBcgcYogyJ1AgNgfpQ.png\" /></figure><p>We’re excited to announce the final beta release for Carbon v11 🥳 This release focuses on updates to our tokens, new components, and better integration with IBM Plex.</p><p>If you have the time to give us any feedback for this release, we’d love to hear from you on <a href=\"https://github.com/carbon-design-system/carbon/discussions/10247\">GitHub Discussions</a>! Feedback is highly appreciated! It helps us ensure the stability of the final release.</p><p>To get started, check out the first draft of our official <a href=\"https://v11.carbondesignsystem.com/migrating/guide/overview/\">Migration Guide</a>. Read more about each feature or find out how to join our Release Partners program below.</p><h3>Bringing in IBM Plex</h3><p>By default, Carbon provides a way to use IBM Plex out-of-the-box through Google Fonts. For a lot of teams using Carbon, this is a great way to get up and running fast. For others, this approach was limiting in a handful of ways.</p><p>In particular, this approach limited what parts of IBM Plex teams could use to IBM Plex Mono, IBM Plex Sans, and IBM Plex Serif. It also limited the font weights and styles that teams could use to only light, normal, and semibold. It also made it more challenging to self-host fonts for products that required that capability.</p><p>In v11, we are introducing a new way to include IBM Plex in your project. This approach will allow you to still use the defaults that come in Carbon today while unlocking all available fonts and weights from IBM Plex for your project. This also allows teams that self-host fonts to configure exactly where each font lives in their project.</p><p>We’re incredibly excited for teams to try this out and bring in the variety of fonts that IBM Plex provides. If you’re trying out this feature in the release, <a href=\"https://github.com/carbon-design-system/carbon/discussions/10247\">we’d love to hear from you</a>!</p><h3>Changes to our disabled tokens</h3><p>We’ve made a couple of changes to our new color tokens in response to feedback from teams using disabled tokens when layering assets. First, the $disabled-text tokens were not visible on the third layer in our dark themes. As a result, instead of having a fixed color (Gray 70) for disabled text we will now use an opacity of the $text-primary token for the disabled text color. This will make it visible on any layer it is placed on along with having equal contrast across layers.</p><p>We’ve also removed the $field-disabled and $layer-disabled tokens completely. This is helpful for disabled states, where there used to be no value change between the enabled $field and $layer tokens and their disabled tokens counterparts. Eliminating the disabled tokens helps to streamline the token set as we now do not have to include disabled field and layer into the layering sets. Now there are six fewer tokens that you need to think about 🎉</p><h3>Changing our layering approach in code</h3><p>The layering tokens that we are adding in v11 provide a simple way for a component to work across different layer levels on a page. In our current implementation, this approach was limited to only the global theme and would fail when teams would inline themes.</p><p>In this release, we revisited our approach to implementing layer tokens to fully support both the global and inline theme use-case. With these changes, you can expect layering tokens to work as expected no matter where they live in your product.</p><p>These changes come as a direct result of feedback on our Beta 2 release and we wanted to take a moment and say thanks to everyone who helped out with this! We really appreciate it.</p><h3>Updates in React</h3><p>This release contains several new components and updates to existing components. It also continues our work of streamlining prop APIs and project conventions. In particular, we want to highlight changes to Tooltip and some of the new components we’re introducing for theming and layering.</p><h4>Tooltip</h4><p>Our set of tooltip components is going through several changes in v11. Most notably, we are updating these components to be more accessible by restricting what content can be rendered inside of a tooltip.</p><p>In the past, the flexibility we offered resulted in situations where underlying semantics of tooltip content would not be communicated to screen readers. In v11, restricting what can be placed in a tooltip addresses this issue. However, with this change, there was not a clear migration path for all situations where someone was using a tooltip.</p><p>As a result, we’re introducing several new primitives such as our Popover component along with techniques like disclosure to help teams build out interactions that have flexible content and remain accessible.</p><h4>Theming and Layering</h4><p>Our usage of CSS Custom Properties in v11 unlocks a way to efficiently change the global theme on a page, which is great for light and dark mode support, along with the ability to theme a particular component or part of a page. Both of these features are now available through a Theme component which allows you to change the theme or set the theme for a particular part of a page.</p><p>This component interacts with a new Layer component which ties in our layering model into the component model. This new component allows you to customize when components render on the next layer without having to worry about passing a light prop to every component in that region.</p><p>Most importantly, this layering approach and Layer component work in our g90 and g100 themes and also fully support inline themes.</p><h4>Updates to component conventions</h4><p>This release continues our efforts to refactor components to have consistent conventions across the design system. This release, in particular, has focused on refactoring class components to functional components. This change should have no impact on you and your usage of the component but will allow our team to use some of the newest features in React along with the custom hooks that we use throughout the library.</p><h3>What’s coming next</h3><p>Our next release will be the first Release Candidate for v11. It will focus on wrapping up the remaining updates that we are planning on making for v11 to the design system. You can expect this release in January 2022.</p><p>If you’d like to help us out along the way, definitely join our <a href=\"https://github.com/carbon-design-system/carbon/wiki/Release-Partner-Program\">release partner program</a>. Otherwise, be on the lookout for our first release candidate next month!</p><p><em>Josh Black is a Software Engineer based out of Austin, TX working on the Carbon Design System. The above article is personal and does not necessarily represent IBM’s positions, strategies, or opinions.</em></p><p><em>Questions or comments about Carbon? Reach out at </em><a href=\"mailto:carbon@us.ibm.com\"><em>carbon@us.ibm.com</em></a><em> or tweet us </em><a href=\"https://twitter.com/_carbondesign\"><em>@_carbondesign</em></a><em>.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9b6be61bb2af\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/carbondesign/carbon-v11-beta-3-9b6be61bb2af\">Carbon v11 Beta 3</a> was originally published in <a href=\"https://medium.com/carbondesign\">_carbondesign</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","content:encodedSnippet":"The final beta release for v11\n\nWe’re excited to announce the final beta release for Carbon v11 🥳 This release focuses on updates to our tokens, new components, and better integration with IBM Plex.\nIf you have the time to give us any feedback for this release, we’d love to hear from you on GitHub Discussions! Feedback is highly appreciated! It helps us ensure the stability of the final release.\nTo get started, check out the first draft of our official Migration Guide. Read more about each feature or find out how to join our Release Partners program below.\nBringing in IBM Plex\nBy default, Carbon provides a way to use IBM Plex out-of-the-box through Google Fonts. For a lot of teams using Carbon, this is a great way to get up and running fast. For others, this approach was limiting in a handful of ways.\nIn particular, this approach limited what parts of IBM Plex teams could use to IBM Plex Mono, IBM Plex Sans, and IBM Plex Serif. It also limited the font weights and styles that teams could use to only light, normal, and semibold. It also made it more challenging to self-host fonts for products that required that capability.\nIn v11, we are introducing a new way to include IBM Plex in your project. This approach will allow you to still use the defaults that come in Carbon today while unlocking all available fonts and weights from IBM Plex for your project. This also allows teams that self-host fonts to configure exactly where each font lives in their project.\nWe’re incredibly excited for teams to try this out and bring in the variety of fonts that IBM Plex provides. If you’re trying out this feature in the release, we’d love to hear from you!\nChanges to our disabled tokens\nWe’ve made a couple of changes to our new color tokens in response to feedback from teams using disabled tokens when layering assets. First, the $disabled-text tokens were not visible on the third layer in our dark themes. As a result, instead of having a fixed color (Gray 70) for disabled text we will now use an opacity of the $text-primary token for the disabled text color. This will make it visible on any layer it is placed on along with having equal contrast across layers.\nWe’ve also removed the $field-disabled and $layer-disabled tokens completely. This is helpful for disabled states, where there used to be no value change between the enabled $field and $layer tokens and their disabled tokens counterparts. Eliminating the disabled tokens helps to streamline the token set as we now do not have to include disabled field and layer into the layering sets. Now there are six fewer tokens that you need to think about 🎉\nChanging our layering approach in code\nThe layering tokens that we are adding in v11 provide a simple way for a component to work across different layer levels on a page. In our current implementation, this approach was limited to only the global theme and would fail when teams would inline themes.\nIn this release, we revisited our approach to implementing layer tokens to fully support both the global and inline theme use-case. With these changes, you can expect layering tokens to work as expected no matter where they live in your product.\nThese changes come as a direct result of feedback on our Beta 2 release and we wanted to take a moment and say thanks to everyone who helped out with this! We really appreciate it.\nUpdates in React\nThis release contains several new components and updates to existing components. It also continues our work of streamlining prop APIs and project conventions. In particular, we want to highlight changes to Tooltip and some of the new components we’re introducing for theming and layering.\nTooltip\nOur set of tooltip components is going through several changes in v11. Most notably, we are updating these components to be more accessible by restricting what content can be rendered inside of a tooltip.\nIn the past, the flexibility we offered resulted in situations where underlying semantics of tooltip content would not be communicated to screen readers. In v11, restricting what can be placed in a tooltip addresses this issue. However, with this change, there was not a clear migration path for all situations where someone was using a tooltip.\nAs a result, we’re introducing several new primitives such as our Popover component along with techniques like disclosure to help teams build out interactions that have flexible content and remain accessible.\nTheming and Layering\nOur usage of CSS Custom Properties in v11 unlocks a way to efficiently change the global theme on a page, which is great for light and dark mode support, along with the ability to theme a particular component or part of a page. Both of these features are now available through a Theme component which allows you to change the theme or set the theme for a particular part of a page.\nThis component interacts with a new Layer component which ties in our layering model into the component model. This new component allows you to customize when components render on the next layer without having to worry about passing a light prop to every component in that region.\nMost importantly, this layering approach and Layer component work in our g90 and g100 themes and also fully support inline themes.\nUpdates to component conventions\nThis release continues our efforts to refactor components to have consistent conventions across the design system. This release, in particular, has focused on refactoring class components to functional components. This change should have no impact on you and your usage of the component but will allow our team to use some of the newest features in React along with the custom hooks that we use throughout the library.\nWhat’s coming next\nOur next release will be the first Release Candidate for v11. It will focus on wrapping up the remaining updates that we are planning on making for v11 to the design system. You can expect this release in January 2022.\nIf you’d like to help us out along the way, definitely join our release partner program. Otherwise, be on the lookout for our first release candidate next month!\nJosh Black is a Software Engineer based out of Austin, TX working on the Carbon Design System. The above article is personal and does not necessarily represent IBM’s positions, strategies, or opinions.\nQuestions or comments about Carbon? Reach out at carbon@us.ibm.com or tweet us @_carbondesign.\n\nCarbon v11 Beta 3 was originally published in _carbondesign on Medium, where people are continuing the conversation by highlighting and responding to this story.","dc:creator":"Josh Black","guid":"https://medium.com/p/9b6be61bb2af","categories":["react","carbon-design-system","sass","design-systems"],"isoDate":"2021-12-10T18:05:01.000Z"},{"creator":"Mike Gower","title":"Not dragging our feet","link":"https://medium.com/carbondesign/not-dragging-our-feet-a03ea57150e?source=rss----105693e8ddba---4","pubDate":"Thu, 28 Oct 2021 15:31:11 GMT","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_SsmQ8yDhNAn-vxXVF9Vag.png\" /></figure><h3>Tackling future accessibility considerations in today’s designs</h3><p>Not that long ago, accessibility issues were raised during testing or at best tackled during development. Two years ago, IBM Accessibility started a ‘shift left’ campaign to reposition accessibility considerations earlier in the software development cycle. These days, that strategy has been taken on fully by IBM Design.</p><p>During a recent design playback on range selection in a complex data chart, I brought up the idea of eliminating a reliance on dragging — which will likely become a future requirement in version 2.2 of the Web Content Accessibility Guidelines (WCAG).</p><h3>Dragging movements</h3><p><a href=\"https://w3c.github.io/wcag/understanding/dragging-movements.html\">2.5.7 Dragging Movements</a> basically says you can’t use dragging as the only way to operate a pointer. A control must also be usable with simpler pointer actions, such as mouse clicks (Figure 1). Who benefits most? Users with decreased fine motor skills, who may have challenges with press-and-hold actions, especially in combination with mousing precision.</p><figure><img alt=\"A user moves a blue circle by dragging and moves a pink circle by activating a button\" src=\"https://cdn-images-1.medium.com/max/1024/1*kb4SHC4kP9fa1LC2ShGAXQ.png\" /><figcaption><em>Figure 1. Dragging an object is still fine, but offer ways for users to do the same thing with simple pointer interactions, like moving an object by clicking a button</em></figcaption></figure><p>WCAG 2.2 is unlikely to become a standard this year, and then won’t be fully adopted by IBM for some time after that. Yet the attitude on a recent playback was that if the user need is known, it made sense to consider now as a good design principle. After years of struggling to get <em>current</em> requirements properly assessed, that willingness to look to the future felt like a real game changer.</p><h3>Dragging in a selection bar</h3><p>So, what exactly is a range selection bar and what are the dragging interaction considerations ? The range selector is basically an enhanced slider. Instead of one thumb slider, it has two that allow a user to define a segment of data from anywhere along a range, such as a few days in the middle of a one-month time bar (Figure 2).</p><figure><img alt=\"The pointer is adjusting the right thumb slider\" src=\"https://cdn-images-1.medium.com/max/1024/1*7IsNFUYDfAQ4VetbriWtfA.png\" /><figcaption>Figure 2. Simplified range bar, showing thumb controls being used to display only a portion of the entire data set</figcaption></figure><p>In a traditional single thumb slider (Figure 3), the user positions the pointer on the control and drags to the desired value.The alternative to dragging is to allow the user to click anywhere in the slider’s range and reposition to that click point. It’s a common part of many implementations. You can use this <a href=\"https://www.w3.org/TR/wai-aria-practices-1.2/examples/slider/slider-1.html\">ARIA example</a> to try the basic interaction.</p><figure><img alt=\"A slider with an integrated text input showing the current value\" src=\"https://cdn-images-1.medium.com/max/1024/1*NHdPmCUGxOoZMtO-8gnmgw.png\" /><figcaption>Figure 3. Volume slider with a range from 0 to 100 and the thumb slider currently positioned on 18</figcaption></figure><p>Another form of simplified activation of a thumb slider is to add input steppers, typically two buttons at the ends, which allow the value to be adjusted by single clicks.</p><p>With two thumb sliders, how could steppers work? IBM’s open-source design system, Carbon, already has such a <a href=\"https://carbon-design-system.github.io/carbon-charts/?path=/story/utility-toolbar--vertical-stacked-bar-time-series\">zoom mechanism for a timeline</a> (Figure 4).</p><figure><img alt=\"A two-thumb slider with a mouse pointer clicking the Decrease button to adjust the range\" src=\"https://cdn-images-1.medium.com/max/1024/1*UTRKlWQb-br2HFaoGubrHA.png\" /><figcaption>Figure 4. Zoom bar, showing + (increase) and – (decrease) zoom buttons that, when clicked, adjust both thumb sliders in concert</figcaption></figure><p>It’s a fairly elegant implementation. A shortcoming is that both thumb slider’s range limits are affected by the stepper change. There is no ability to step them individually. You could achieve independence by allowing one slider control to be selected, and then step just its value. But that potentially adds more user effort, so how valuable is stepping in a large data set? <a href=\"https://www.nngroup.com/articles/input-steppers/\">Neilsen Norman Group writes</a> not to use such controls for a wide range of values “with no one value being entered significantly more often.” IBM is designing broadly for varied data sets, so we set steppers aside as suboptimal.</p><h3>Solution: a clickable slider bar</h3><p>After discussion, the team opted to try a range bar, clickable across its length, with a proximity heuristic. Whichever control is closer to the click point would orient to that location. When the click is outside the current selection range, it’s obvious which slider is going to expand. But what if the user clicks roughly equidistant between the control? Or what if the two controls were very close together? The heuristic should still work.</p><figure><img alt=\"User clicks a two-thumb slider several times, choosing points a third of the way from each end, then a point in the middle, then clicks at each end, setting the range to its limits\" src=\"https://cdn-images-1.medium.com/max/1024/1*1j7hnLoRam5me3Ql9QqLJA.gif\" /><figcaption>Figure 5. Animation showing thumb sliders responding to clicks on the slider bar</figcaption></figure><p>With near-equidistant clicks, it will bring the <em>closer</em> slider to the click location. Where the controls are overlapping, the click can still reposition the nearer control. Where the controls are on the same point, or the click occurs precisely halfway between, which control is moved is a moot point. One of the controls moves. The other remains in its prior location, and can then be adjusted as necessary.</p><h3>Other range considerations</h3><p>The team also discussed the ability to enter in values manually where precision is needed, something already offered in <a href=\"https://www.carbondesignsystem.com/components/slider/usage/\">Carbon’s slider component</a> (Figure 3). Numeric text inputs at each end can provide this — although it’s a somewhat inelegant visual solution and the inputs lack visible labels (Figure 6). One additional benefit of inputs: they allow for the display of the values. The click not only repositions the control but updates the input numbers.</p><figure><img alt=\"Slider with values of 30 and 60 degrees in the inputs\" src=\"https://cdn-images-1.medium.com/max/1024/1*DfJ-3nom3jrj3W2tKBjiWA.png\" /><figcaption>Figure 6. Lo-fi concept of a range selector bar with (unlabelled) inputs at each end, allowing for manual entry of precise starting and end values for a range (in this case degrees Celsius)</figcaption></figure><p>Speaking of displaying values, Diana Stanciulescu, the designer focusing on these data visualizations, had <em>already</em> led the call through discussions on labelling, including exposing both the terminal ranges and the selection values. IBM Design is trying to use persistently displayed values where it makes sense (instead of relying on hover, with its accompanying accessibility challenges). After discussion, she began to explore placing the values for controls above their location (Figure 7), since pointers or users’ fingers are likely to obscure values located underneath the control.</p><figure><img alt=\"The 30 and 60 degree values appear above the thumb slider positions\" src=\"https://cdn-images-1.medium.com/max/1024/1*5ikSoEb522xBqlGkBH7k4Q.png\" /><figcaption>Figure 7. A temperature range bar, with starting and end values as well as current selection values displayed</figcaption></figure><p>Finally, another designer on the playback mentioned putting the thumb controls in the tab order so there is a <em>keyboard</em> method for the slider. This is an important established pattern which can offer the ability for a keyboard user to change the values, often incrementing steps by scales of 10 (see the <a href=\"https://www.w3.org/TR/wai-aria-practices-1.2/examples/slider/slider-1.html\">ARIA example</a>). It should be simple to adopt this on a multi-thumb slider. However, it’s important to emphasize that this doesn’t replace these future needs for better <em>pointer</em> interaction, the focus of our discussion.</p><p>I’m sure Diana will iterate this zoom bar to an even better interaction. I’m just as sure that designers are much better positioned to deal with nuances of interaction than a developer under the gun to get an implementation out the door. It’s another example of how accessibility doesn’t need to (ahem) drag down good design.</p><figure><img alt=\"Illustration of hand dragging an object\" src=\"https://cdn-images-1.medium.com/max/1024/1*_SsmQ8yDhNAn-vxXVF9Vag.png\" /></figure><p><em>First dragging iIllustration by </em><a href=\"https://medium.com/@hiraeth_\"><em>Jess Lin</em></a><em>; all others by </em><a href=\"https://www.linkedin.com/in/d-stanciulescu\"><em>Diana Stanciulescu</em></a><em>, who also provided article input.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a03ea57150e\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/carbondesign/not-dragging-our-feet-a03ea57150e\">Not dragging our feet</a> was originally published in <a href=\"https://medium.com/carbondesign\">_carbondesign</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","content:encodedSnippet":"Tackling future accessibility considerations in today’s designs\nNot that long ago, accessibility issues were raised during testing or at best tackled during development. Two years ago, IBM Accessibility started a ‘shift left’ campaign to reposition accessibility considerations earlier in the software development cycle. These days, that strategy has been taken on fully by IBM Design.\nDuring a recent design playback on range selection in a complex data chart, I brought up the idea of eliminating a reliance on dragging — which will likely become a future requirement in version 2.2 of the Web Content Accessibility Guidelines (WCAG).\nDragging movements\n2.5.7 Dragging Movements basically says you can’t use dragging as the only way to operate a pointer. A control must also be usable with simpler pointer actions, such as mouse clicks (Figure 1). Who benefits most? Users with decreased fine motor skills, who may have challenges with press-and-hold actions, especially in combination with mousing precision.\nFigure 1. Dragging an object is still fine, but offer ways for users to do the same thing with simple pointer interactions, like moving an object by clicking a button\nWCAG 2.2 is unlikely to become a standard this year, and then won’t be fully adopted by IBM for some time after that. Yet the attitude on a recent playback was that if the user need is known, it made sense to consider now as a good design principle. After years of struggling to get current requirements properly assessed, that willingness to look to the future felt like a real game changer.\nDragging in a selection bar\nSo, what exactly is a range selection bar and what are the dragging interaction considerations ? The range selector is basically an enhanced slider. Instead of one thumb slider, it has two that allow a user to define a segment of data from anywhere along a range, such as a few days in the middle of a one-month time bar (Figure 2).\nFigure 2. Simplified range bar, showing thumb controls being used to display only a portion of the entire data set\nIn a traditional single thumb slider (Figure 3), the user positions the pointer on the control and drags to the desired value.The alternative to dragging is to allow the user to click anywhere in the slider’s range and reposition to that click point. It’s a common part of many implementations. You can use this ARIA example to try the basic interaction.\nFigure 3. Volume slider with a range from 0 to 100 and the thumb slider currently positioned on 18\nAnother form of simplified activation of a thumb slider is to add input steppers, typically two buttons at the ends, which allow the value to be adjusted by single clicks.\nWith two thumb sliders, how could steppers work? IBM’s open-source design system, Carbon, already has such a zoom mechanism for a timeline (Figure 4).\nFigure 4. Zoom bar, showing + (increase) and – (decrease) zoom buttons that, when clicked, adjust both thumb sliders in concert\nIt’s a fairly elegant implementation. A shortcoming is that both thumb slider’s range limits are affected by the stepper change. There is no ability to step them individually. You could achieve independence by allowing one slider control to be selected, and then step just its value. But that potentially adds more user effort, so how valuable is stepping in a large data set? Neilsen Norman Group writes not to use such controls for a wide range of values “with no one value being entered significantly more often.” IBM is designing broadly for varied data sets, so we set steppers aside as suboptimal.\nSolution: a clickable slider bar\nAfter discussion, the team opted to try a range bar, clickable across its length, with a proximity heuristic. Whichever control is closer to the click point would orient to that location. When the click is outside the current selection range, it’s obvious which slider is going to expand. But what if the user clicks roughly equidistant between the control? Or what if the two controls were very close together? The heuristic should still work.\nFigure 5. Animation showing thumb sliders responding to clicks on the slider bar\nWith near-equidistant clicks, it will bring the closer slider to the click location. Where the controls are overlapping, the click can still reposition the nearer control. Where the controls are on the same point, or the click occurs precisely halfway between, which control is moved is a moot point. One of the controls moves. The other remains in its prior location, and can then be adjusted as necessary.\nOther range considerations\nThe team also discussed the ability to enter in values manually where precision is needed, something already offered in Carbon’s slider component (Figure 3). Numeric text inputs at each end can provide this — although it’s a somewhat inelegant visual solution and the inputs lack visible labels (Figure 6). One additional benefit of inputs: they allow for the display of the values. The click not only repositions the control but updates the input numbers.\nFigure 6. Lo-fi concept of a range selector bar with (unlabelled) inputs at each end, allowing for manual entry of precise starting and end values for a range (in this case degrees Celsius)\nSpeaking of displaying values, Diana Stanciulescu, the designer focusing on these data visualizations, had already led the call through discussions on labelling, including exposing both the terminal ranges and the selection values. IBM Design is trying to use persistently displayed values where it makes sense (instead of relying on hover, with its accompanying accessibility challenges). After discussion, she began to explore placing the values for controls above their location (Figure 7), since pointers or users’ fingers are likely to obscure values located underneath the control.\nFigure 7. A temperature range bar, with starting and end values as well as current selection values displayed\nFinally, another designer on the playback mentioned putting the thumb controls in the tab order so there is a keyboard method for the slider. This is an important established pattern which can offer the ability for a keyboard user to change the values, often incrementing steps by scales of 10 (see the ARIA example). It should be simple to adopt this on a multi-thumb slider. However, it’s important to emphasize that this doesn’t replace these future needs for better pointer interaction, the focus of our discussion.\nI’m sure Diana will iterate this zoom bar to an even better interaction. I’m just as sure that designers are much better positioned to deal with nuances of interaction than a developer under the gun to get an implementation out the door. It’s another example of how accessibility doesn’t need to (ahem) drag down good design.\n\nFirst dragging iIllustration by Jess Lin; all others by Diana Stanciulescu, who also provided article input.\n\nNot dragging our feet was originally published in _carbondesign on Medium, where people are continuing the conversation by highlighting and responding to this story.","dc:creator":"Mike Gower","guid":"https://medium.com/p/a03ea57150e","categories":["wcag","design","accessibility","charts","ux"],"isoDate":"2021-10-28T15:31:11.000Z"},{"creator":"Andrea Cardona","title":"Feature Flags in a Design System: a true love story","link":"https://medium.com/carbondesign/feature-flags-in-a-design-system-a-true-love-story-504a1d4c5889?source=rss----105693e8ddba---4","pubDate":"Tue, 19 Oct 2021 15:32:37 GMT","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JjdF4f_rGRubT3rDyl_6lQ.png\" /></figure><p>As some of you might know, v11 has been a huge initiative for the Carbon team for well over a year now, involving every single team member working to improve so many different moving parts of the Carbon ecosystem. While thinking about how we wanted to build, create and iterate on features without disrupting the workflow of our community, and minimizing the disruption of ours, we decided to use feature flags.</p><h3>Why a feature flag:</h3><p>Our team has been dynamically involved in the development v11, but that also hasn’t stopped us from attending to our everyday work around the design system. We release every two weeks, with fixes to bug reports, feature requests, or a11y enhancements. With a continuous two week release cadence, running in parallel to our v11 work, we needed a workflow strategy that would allow us to work on new features as a team, and still work together on everyday issues — thank you feature flags.</p><p>Our team uses trunk based development, working off of a single <em>main </em>branch. While we are all introducing a complexity of new features, feature flags help us prevent potential merge conflicts and broken builds. We are able to test features locally, and build them out incrementally.</p><p>While planning for v11 and its release, we didn’t want to be bombarded with future merge conflicts or have to keep track of multiple feature branches created by different <em>squads</em> within the team.</p><p>As a design system, we also have to be careful about the changes we make to our codebase. We don’t want to accidentally introduce any breaking changes to our users (that would suck) or unintentionally release unstable features (that would also suck). With a feature flag we can keep unstable features shielded behind a flag from our community.</p><p>Feature flags allow us to safely write and test all of the component changes and updates our hearts desire, without the fear of accidentally pushing to production code. Basically, we can break, create and re-write our code, behind the flag, in a controlled environment.</p><ul><li>Reduces risk of introducing breaking changes to our community</li><li>Prevents potential merge conflicts within the mono-repo</li><li>Avoids potentially breaking any builds</li><li>Allows us to stay organized, without managing multiple feature branches</li><li>Allows us to build out features incrementally</li></ul><h4><strong>What we decided to flag:</strong></h4><p>In our major release there are two main categories for our upcoming features: <em>net new</em> and <em>breaking changes</em>.</p><p>New features in our v11 release included things like, new color tokens, inline theming, and new components such as Popover, Theme, Tooltip and a few others.</p><p>Work on many of these features was done over several sprints, involving a constant feedback loop between design and development. Using a feature flag allows us build out features alongside our designers, get feedback internally, and continue to work incrementally, leading up to our release.</p><p>We are able work on features such as prop updates, component refactors, and move from CSS grid to CSS flex-box, by developing them behind a feature flag.</p><p>The flexibility of a feature flag, allows us to develop and run these net new and breaking changes, in our main package, alongside our production code, without ever interrupting it. We are able to test and build tools such as CSS flex-box, in a controlled environment before introducing it to our users to be consumed.</p><ul><li>Potential breaking changes</li><li>Net new (release specific) features</li></ul><p>To see a list of breaking changes, and net new features that we included in our v11 release — checkout our migration docs <a href=\"https://v11.carbondesignsystem.com/migrating/guide/develop#changelog\">here</a>.</p><h4>User interviews &amp; feedback:</h4><p>Feature flags have provided us with the flexibility needed around our release, testing and feedback process.</p><p>With the release of v11, we developed an incremental release process, that would enable teams to test out new features and provide us with feedback. Through our <a href=\"https://github.com/carbon-design-system/carbon/wiki/Release-Partner-Program\">Release Partner Program</a>, teams have the ability to turn on the feature flag, and test out features that have been recently released. We followed an alpha, beta, etc. release cycle, to fix and improve upon features, before announcing a more formal GA release.</p><p>Feature work fell into our two weeks sprints, targeting specific v11 release dates. Learn more about how we have structured our release timeline <a href=\"https://github.com/carbon-design-system/carbon/issues/7717\">here</a>.</p><p>We want teams testing out new components and potentially breaking changes to feel excited about the value of this new release. For us, that meant making sure this migration was as frictionless as possible. Alongside our <a href=\"https://github.com/carbon-design-system/carbon/wiki/Release-Partner-Program\">Release Partner Program</a>, we conducted a series of user interviews with developers, designers and product managers, from a variety of different teams. We got direct feedback on new features they had tested, code they had implemented, and ways that we could improve our v11 migration experience from previous ones. (ex: v9 — v10).</p><p>Our user interview questions boiled down to:</p><ul><li>Do you mind walking us through what your experience has been with the Beta release?</li><li><em>If</em> there has been an issue with a feature (in early release stages — there more than likely is) → Can you walk us through the challenges of building with X feature?</li><li>What are some improvements we can make while your team is migrating or using X feature?</li></ul><p>While we continue to work through the testing and feedback process, using a feature flag gives teams the ability to quickly disable the flag and continue with their <em>as-is</em> Carbon version until we were able to able to move features to a more stable status.</p><ul><li>Perfectly flexible for an incremental release process</li><li>Teams can quickly test, provide feedback, and disable flags as needed</li></ul><h4><strong>In conclusion:</strong></h4><p>Feature flags have been an integral part of v11 release strategy. We can create and build features iteratively. Our community can turn on a flag to test, and run features enhancements without disrupting their workflows. We as a team, can switch between work streams by turning the flag off and on. And we can release features incrementally as the are scheduled into our release cycle, without accidentally deploying any risky code.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=504a1d4c5889\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/carbondesign/feature-flags-in-a-design-system-a-true-love-story-504a1d4c5889\">Feature Flags in a Design System: a true love story</a> was originally published in <a href=\"https://medium.com/carbondesign\">_carbondesign</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","content:encodedSnippet":"As some of you might know, v11 has been a huge initiative for the Carbon team for well over a year now, involving every single team member working to improve so many different moving parts of the Carbon ecosystem. While thinking about how we wanted to build, create and iterate on features without disrupting the workflow of our community, and minimizing the disruption of ours, we decided to use feature flags.\nWhy a feature flag:\nOur team has been dynamically involved in the development v11, but that also hasn’t stopped us from attending to our everyday work around the design system. We release every two weeks, with fixes to bug reports, feature requests, or a11y enhancements. With a continuous two week release cadence, running in parallel to our v11 work, we needed a workflow strategy that would allow us to work on new features as a team, and still work together on everyday issues — thank you feature flags.\nOur team uses trunk based development, working off of a single main branch. While we are all introducing a complexity of new features, feature flags help us prevent potential merge conflicts and broken builds. We are able to test features locally, and build them out incrementally.\nWhile planning for v11 and its release, we didn’t want to be bombarded with future merge conflicts or have to keep track of multiple feature branches created by different squads within the team.\nAs a design system, we also have to be careful about the changes we make to our codebase. We don’t want to accidentally introduce any breaking changes to our users (that would suck) or unintentionally release unstable features (that would also suck). With a feature flag we can keep unstable features shielded behind a flag from our community.\nFeature flags allow us to safely write and test all of the component changes and updates our hearts desire, without the fear of accidentally pushing to production code. Basically, we can break, create and re-write our code, behind the flag, in a controlled environment.\n\nReduces risk of introducing breaking changes to our community\nPrevents potential merge conflicts within the mono-repo\nAvoids potentially breaking any builds\nAllows us to stay organized, without managing multiple feature branches\nAllows us to build out features incrementally\n\nWhat we decided to flag:\nIn our major release there are two main categories for our upcoming features: net new and breaking changes.\nNew features in our v11 release included things like, new color tokens, inline theming, and new components such as Popover, Theme, Tooltip and a few others.\nWork on many of these features was done over several sprints, involving a constant feedback loop between design and development. Using a feature flag allows us build out features alongside our designers, get feedback internally, and continue to work incrementally, leading up to our release.\nWe are able work on features such as prop updates, component refactors, and move from CSS grid to CSS flex-box, by developing them behind a feature flag.\nThe flexibility of a feature flag, allows us to develop and run these net new and breaking changes, in our main package, alongside our production code, without ever interrupting it. We are able to test and build tools such as CSS flex-box, in a controlled environment before introducing it to our users to be consumed.\n\nPotential breaking changes\nNet new (release specific) features\n\nTo see a list of breaking changes, and net new features that we included in our v11 release — checkout our migration docs here.\nUser interviews & feedback:\nFeature flags have provided us with the flexibility needed around our release, testing and feedback process.\nWith the release of v11, we developed an incremental release process, that would enable teams to test out new features and provide us with feedback. Through our Release Partner Program, teams have the ability to turn on the feature flag, and test out features that have been recently released. We followed an alpha, beta, etc. release cycle, to fix and improve upon features, before announcing a more formal GA release.\nFeature work fell into our two weeks sprints, targeting specific v11 release dates. Learn more about how we have structured our release timeline here.\nWe want teams testing out new components and potentially breaking changes to feel excited about the value of this new release. For us, that meant making sure this migration was as frictionless as possible. Alongside our Release Partner Program, we conducted a series of user interviews with developers, designers and product managers, from a variety of different teams. We got direct feedback on new features they had tested, code they had implemented, and ways that we could improve our v11 migration experience from previous ones. (ex: v9 — v10).\nOur user interview questions boiled down to:\n\nDo you mind walking us through what your experience has been with the Beta release?\nIf there has been an issue with a feature (in early release stages — there more than likely is) → Can you walk us through the challenges of building with X feature?\nWhat are some improvements we can make while your team is migrating or using X feature?\n\nWhile we continue to work through the testing and feedback process, using a feature flag gives teams the ability to quickly disable the flag and continue with their as-is Carbon version until we were able to able to move features to a more stable status.\n\nPerfectly flexible for an incremental release process\nTeams can quickly test, provide feedback, and disable flags as needed\n\nIn conclusion:\nFeature flags have been an integral part of v11 release strategy. We can create and build features iteratively. Our community can turn on a flag to test, and run features enhancements without disrupting their workflows. We as a team, can switch between work streams by turning the flag off and on. And we can release features incrementally as the are scheduled into our release cycle, without accidentally deploying any risky code.\n\nFeature Flags in a Design System: a true love story was originally published in _carbondesign on Medium, where people are continuing the conversation by highlighting and responding to this story.","dc:creator":"Andrea Cardona","guid":"https://medium.com/p/504a1d4c5889","categories":["development","design-systems","feature-flags","carbon-design-system","design"],"isoDate":"2021-10-19T15:32:37.000Z"}],"feedUrl":"https://medium.com/feed/carbondesign","image":{"link":"https://medium.com/carbondesign?source=rss----105693e8ddba---4","url":"https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png","title":"_carbondesign - Medium"},"paginationLinks":{"self":"https://medium.com/feed/carbondesign"},"title":"_carbondesign - Medium","description":"Carbon is the design system for IBM software products. It is a series of individual styles, components, and guidelines used for creating unified UI. - Medium","webMaster":"yourfriends@medium.com","generator":"Medium","link":"https://medium.com/carbondesign?source=rss----105693e8ddba---4","lastBuildDate":"Fri, 13 May 2022 12:52:43 GMT"}}